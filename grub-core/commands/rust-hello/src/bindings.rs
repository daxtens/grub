/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const GRUB_MM_H: u32 = 1;
pub const GRUB_TYPES_HEADER: u32 = 1;
pub const _FILE_OFFSET_BITS: u32 = 64;
pub const GCRYPT_NO_DEPRECATED: u32 = 1;
pub const HAVE_MEMMOVE: u32 = 1;
pub const DISK_CACHE_STATS: u32 = 0;
pub const BOOT_TIME_STATS: u32 = 0;
pub const MINILZO_CFG_SKIP_LZO_PTR: u32 = 1;
pub const MINILZO_CFG_SKIP_LZO_UTIL: u32 = 1;
pub const MINILZO_CFG_SKIP_LZO_STRING: u32 = 1;
pub const MINILZO_CFG_SKIP_LZO_INIT: u32 = 1;
pub const MINILZO_CFG_SKIP_LZO1X_1_COMPRESS: u32 = 1;
pub const MINILZO_CFG_SKIP_LZO1X_DECOMPRESS: u32 = 1;
pub const C_LOCALE_MAYBE_EILSEQ: u32 = 1;
pub const DBL_EXPBIT0_BIT: u32 = 20;
pub const DBL_EXPBIT0_WORD: u32 = 1;
pub const ENABLE_NLS: u32 = 1;
pub const FUNC_NL_LANGINFO_YESEXPR_WORKS: u32 = 1;
pub const GNULIB_FD_SAFER_FLAG: u32 = 1;
pub const GNULIB_FSCANF: u32 = 1;
pub const GNULIB_LOCK: u32 = 1;
pub const GNULIB_MALLOC_GNU: u32 = 1;
pub const GNULIB_MSVC_NOTHROW: u32 = 1;
pub const GNULIB_OPENAT: u32 = 1;
pub const GNULIB_REALLOC_GNU: u32 = 1;
pub const GNULIB_SCANF: u32 = 1;
pub const GNULIB_STRERROR: u32 = 1;
pub const GNULIB_TEST_BTOWC: u32 = 1;
pub const GNULIB_TEST_CHDIR: u32 = 1;
pub const GNULIB_TEST_CLOEXEC: u32 = 1;
pub const GNULIB_TEST_CLOSE: u32 = 1;
pub const GNULIB_TEST_DIRFD: u32 = 1;
pub const GNULIB_TEST_DUP2: u32 = 1;
pub const GNULIB_TEST_FCHDIR: u32 = 1;
pub const GNULIB_TEST_FCNTL: u32 = 1;
pub const GNULIB_TEST_FNMATCH: u32 = 1;
pub const GNULIB_TEST_FSTAT: u32 = 1;
pub const GNULIB_TEST_GETCWD: u32 = 1;
pub const GNULIB_TEST_GETDELIM: u32 = 1;
pub const GNULIB_TEST_GETDTABLESIZE: u32 = 1;
pub const GNULIB_TEST_GETLINE: u32 = 1;
pub const GNULIB_TEST_LOCALECONV: u32 = 1;
pub const GNULIB_TEST_MALLOC_POSIX: u32 = 1;
pub const GNULIB_TEST_MBRTOWC: u32 = 1;
pub const GNULIB_TEST_MBSINIT: u32 = 1;
pub const GNULIB_TEST_MBSRTOWCS: u32 = 1;
pub const GNULIB_TEST_MBTOWC: u32 = 1;
pub const GNULIB_TEST_MEMCHR: u32 = 1;
pub const GNULIB_TEST_MEMPCPY: u32 = 1;
pub const GNULIB_TEST_MEMRCHR: u32 = 1;
pub const GNULIB_TEST_NL_LANGINFO: u32 = 1;
pub const GNULIB_TEST_OPEN: u32 = 1;
pub const GNULIB_TEST_OPENAT: u32 = 1;
pub const GNULIB_TEST_RAWMEMCHR: u32 = 1;
pub const GNULIB_TEST_REALLOC_POSIX: u32 = 1;
pub const GNULIB_TEST_SLEEP: u32 = 1;
pub const GNULIB_TEST_STAT: u32 = 1;
pub const GNULIB_TEST_STRCHRNUL: u32 = 1;
pub const GNULIB_TEST_STRDUP: u32 = 1;
pub const GNULIB_TEST_STRERROR: u32 = 1;
pub const GNULIB_TEST_STRNDUP: u32 = 1;
pub const GNULIB_TEST_STRNLEN: u32 = 1;
pub const GNULIB_TEST_VSNPRINTF: u32 = 1;
pub const GNULIB_TEST_WCRTOMB: u32 = 1;
pub const GNULIB_TEST_WCWIDTH: u32 = 1;
pub const GRUB_BOOT_DIR_NAME: &'static [u8; 5usize] = b"boot\0";
pub const GRUB_DATADIR: &'static [u8; 17usize] = b"/usr/local/share\0";
pub const GRUB_DIR_NAME: &'static [u8; 5usize] = b"grub\0";
pub const GRUB_LIBDIR: &'static [u8; 15usize] = b"/usr/local/lib\0";
pub const GRUB_SYSCONFDIR: &'static [u8; 15usize] = b"/usr/local/etc\0";
pub const HAVE_ALLOCA: u32 = 1;
pub const HAVE_ALLOCA_H: u32 = 1;
pub const HAVE_ATEXIT: u32 = 1;
pub const HAVE_BTOWC: u32 = 1;
pub const HAVE_DCGETTEXT: u32 = 1;
pub const HAVE_DECL_ALARM: u32 = 1;
pub const HAVE_DECL_CLEARERR_UNLOCKED: u32 = 1;
pub const HAVE_DECL_DIRFD: u32 = 1;
pub const HAVE_DECL_FCHDIR: u32 = 1;
pub const HAVE_DECL_FEOF_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FERROR_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FFLUSH_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FGETS_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FPUTC_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FPUTS_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FREAD_UNLOCKED: u32 = 1;
pub const HAVE_DECL_FWRITE_UNLOCKED: u32 = 1;
pub const HAVE_DECL_GETCHAR_UNLOCKED: u32 = 1;
pub const HAVE_DECL_GETC_UNLOCKED: u32 = 1;
pub const HAVE_DECL_GETDELIM: u32 = 1;
pub const HAVE_DECL_GETDTABLESIZE: u32 = 1;
pub const HAVE_DECL_GETLINE: u32 = 1;
pub const HAVE_DECL_ISBLANK: u32 = 1;
pub const HAVE_DECL_MBSWIDTH_IN_WCHAR_H: u32 = 0;
pub const HAVE_DECL_MEMRCHR: u32 = 1;
pub const HAVE_DECL_PROGRAM_INVOCATION_NAME: u32 = 1;
pub const HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME: u32 = 1;
pub const HAVE_DECL_PUTCHAR_UNLOCKED: u32 = 1;
pub const HAVE_DECL_PUTC_UNLOCKED: u32 = 1;
pub const HAVE_DECL_SLEEP: u32 = 1;
pub const HAVE_DECL_STRDUP: u32 = 1;
pub const HAVE_DECL_STRERROR_R: u32 = 1;
pub const HAVE_DECL_STRNCASECMP: u32 = 1;
pub const HAVE_DECL_STRNDUP: u32 = 1;
pub const HAVE_DECL_STRNLEN: u32 = 1;
pub const HAVE_DECL_VSNPRINTF: u32 = 1;
pub const HAVE_DECL_WCWIDTH: u32 = 1;
pub const HAVE_DECL__SNPRINTF: u32 = 0;
pub const HAVE_DECL___ARGV: u32 = 0;
pub const HAVE_DEVICE_MAPPER: u32 = 1;
pub const HAVE_DIRENT_H: u32 = 1;
pub const HAVE_DIRFD: u32 = 1;
pub const HAVE_DUP2: u32 = 1;
pub const HAVE_FCHDIR: u32 = 1;
pub const HAVE_FCNTL: u32 = 1;
pub const HAVE_FEATURES_H: u32 = 1;
pub const HAVE_FLOCKFILE: u32 = 1;
pub const HAVE_FNMATCH: u32 = 1;
pub const HAVE_FNMATCH_H: u32 = 1;
pub const HAVE_FT2BUILD_H: u32 = 1;
pub const HAVE_FUNLOCKFILE: u32 = 1;
pub const HAVE_FUSE_FUSE_H: u32 = 1;
pub const HAVE_GETDELIM: u32 = 1;
pub const HAVE_GETDTABLESIZE: u32 = 1;
pub const HAVE_GETOPT_H: u32 = 1;
pub const HAVE_GETOPT_LONG_ONLY: u32 = 1;
pub const HAVE_GETTEXT: u32 = 1;
pub const HAVE_INTMAX_T: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_INTTYPES_H_WITH_UINTMAX: u32 = 1;
pub const HAVE_ISASCII: u32 = 1;
pub const HAVE_ISBLANK: u32 = 1;
pub const HAVE_ISWCNTRL: u32 = 1;
pub const HAVE_ISWCTYPE: u32 = 1;
pub const HAVE_LANGINFO_CODESET: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LIBDEVMAPPER: u32 = 1;
pub const HAVE_LIBFUSE: u32 = 1;
pub const HAVE_LIBINTL_H: u32 = 1;
pub const HAVE_LIBLZMA: u32 = 1;
pub const HAVE_LIMITS_H: u32 = 1;
pub const HAVE_LONG_LONG_INT: u32 = 1;
pub const HAVE_LSTAT: u32 = 1;
pub const HAVE_MALLOC_GNU: u32 = 1;
pub const HAVE_MALLOC_H: u32 = 1;
pub const HAVE_MALLOC_POSIX: u32 = 1;
pub const HAVE_MAP_ANONYMOUS: u32 = 1;
pub const HAVE_MBRTOWC: u32 = 1;
pub const HAVE_MBSINIT: u32 = 1;
pub const HAVE_MBSRTOWCS: u32 = 1;
pub const HAVE_MBSTATE_T: u32 = 1;
pub const HAVE_MEMALIGN: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MEMPCPY: u32 = 1;
pub const HAVE_MEMRCHR: u32 = 1;
pub const HAVE_MPROTECT: u32 = 1;
pub const HAVE_NL_LANGINFO: u32 = 1;
pub const HAVE_OPENAT: u32 = 1;
pub const HAVE_PIPE: u32 = 1;
pub const HAVE_POSIX_MEMALIGN: u32 = 1;
pub const HAVE_PROGRAM_INVOCATION_NAME: u32 = 1;
pub const HAVE_PROGRAM_INVOCATION_SHORT_NAME: u32 = 1;
pub const HAVE_PTHREAD_MUTEX_RECURSIVE: u32 = 1;
pub const HAVE_PTHREAD_RWLOCK: u32 = 1;
pub const HAVE_RAWMEMCHR: u32 = 1;
pub const HAVE_REALLOC_GNU: u32 = 1;
pub const HAVE_REALLOC_POSIX: u32 = 1;
pub const HAVE_SLEEP: u32 = 1;
pub const HAVE_SNPRINTF: u32 = 1;
pub const HAVE_SNPRINTF_RETVAL_C99: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDINT_H_WITH_UINTMAX: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_STRCHRNUL: u32 = 1;
pub const HAVE_STRDUP: u32 = 1;
pub const HAVE_STRERROR_R: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRNCASECMP: u32 = 1;
pub const HAVE_STRNDUP: u32 = 1;
pub const HAVE_STRNLEN: u32 = 1;
pub const HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC: u32 = 1;
pub const HAVE_SYMLINK: u32 = 1;
pub const HAVE_SYSEXITS_H: u32 = 1;
pub const HAVE_SYS_CDEFS_H: u32 = 1;
pub const HAVE_SYS_MMAN_H: u32 = 1;
pub const HAVE_SYS_MOUNT_H: u32 = 1;
pub const HAVE_SYS_PARAM_H: u32 = 1;
pub const HAVE_SYS_SOCKET_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TIME_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_TOWLOWER: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_UNSIGNED_LONG_LONG_INT: u32 = 1;
pub const HAVE_VSNPRINTF: u32 = 1;
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_WCHAR_T: u32 = 1;
pub const HAVE_WCRTOMB: u32 = 1;
pub const HAVE_WCSLEN: u32 = 1;
pub const HAVE_WCSNLEN: u32 = 1;
pub const HAVE_WCTYPE_H: u32 = 1;
pub const HAVE_WCWIDTH: u32 = 1;
pub const HAVE_WINT_T: u32 = 1;
pub const HAVE_WMEMCHR: u32 = 1;
pub const HAVE_WMEMCPY: u32 = 1;
pub const HAVE_WMEMPCPY: u32 = 1;
pub const HAVE_WORKING_O_NOATIME: u32 = 1;
pub const HAVE_WORKING_O_NOFOLLOW: u32 = 1;
pub const HAVE__BOOL: u32 = 1;
pub const HAVE___BSWAPDI2: u32 = 1;
pub const HAVE___BSWAPSI2: u32 = 1;
pub const HAVE___BUILTIN_EXPECT: u32 = 1;
pub const HAVE___BZERO: u32 = 1;
pub const HAVE___CLZDI2: u32 = 1;
pub const HAVE___CTZDI2: u32 = 1;
pub const HAVE___DEREGISTER_FRAME_INFO: u32 = 1;
pub const HAVE___INLINE: u32 = 1;
pub const HAVE___REGISTER_FRAME_INFO: u32 = 1;
pub const LOCALEDIR: &'static [u8; 24usize] = b"/usr/local/share/locale\0";
pub const LSTAT_FOLLOWS_SLASHED_SYMLINK: u32 = 1;
pub const MAJOR_IN_SYSMACROS: u32 = 1;
pub const MALLOC_0_IS_NONNULL: u32 = 1;
pub const __USE_MINGW_ANSI_STDIO: u32 = 1;
pub const PACKAGE: &'static [u8; 5usize] = b"grub\0";
pub const PACKAGE_BUGREPORT: &'static [u8; 17usize] = b"bug-grub@gnu.org\0";
pub const PACKAGE_NAME: &'static [u8; 5usize] = b"GRUB\0";
pub const PACKAGE_STRING: &'static [u8; 10usize] = b"GRUB 2.11\0";
pub const PACKAGE_TARNAME: &'static [u8; 5usize] = b"grub\0";
pub const PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const PACKAGE_VERSION: &'static [u8; 5usize] = b"2.11\0";
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_OFF_T: u32 = 8;
pub const SIZEOF_VOID_P: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const STRERROR_R_CHAR_P: u32 = 1;
pub const TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC: u32 = 1;
pub const USE_LIBLZMA: u32 = 1;
pub const USE_POSIX_THREADS: u32 = 1;
pub const USE_POSIX_THREADS_WEAK: u32 = 1;
pub const _ALL_SOURCE: u32 = 1;
pub const _DARWIN_C_SOURCE: u32 = 1;
pub const _GNU_SOURCE: u32 = 1;
pub const _NETBSD_SOURCE: u32 = 1;
pub const _OPENBSD_SOURCE: u32 = 1;
pub const _POSIX_PTHREAD_SEMANTICS: u32 = 1;
pub const __STDC_WANT_IEC_60559_ATTRIBS_EXT__: u32 = 1;
pub const __STDC_WANT_IEC_60559_BFP_EXT__: u32 = 1;
pub const __STDC_WANT_IEC_60559_DFP_EXT__: u32 = 1;
pub const __STDC_WANT_IEC_60559_FUNCS_EXT__: u32 = 1;
pub const __STDC_WANT_IEC_60559_TYPES_EXT__: u32 = 1;
pub const __STDC_WANT_LIB_EXT2__: u32 = 1;
pub const __STDC_WANT_MATH_SPEC_FUNCS__: u32 = 1;
pub const _TANDEM_SOURCE: u32 = 1;
pub const _HPUX_ALT_XOPEN_SOCKET_API: u32 = 1;
pub const __EXTENSIONS__: u32 = 1;
pub const VERSION: &'static [u8; 5usize] = b"2.11\0";
pub const _DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _REGEX_INCLUDE_LIMITS_H: u32 = 1;
pub const _REGEX_LARGE_OFFSETS: u32 = 1;
pub const _USE_STD_STAT: u32 = 1;
pub const GRUB_TYPES_CPU_HEADER: u32 = 1;
pub const GRUB_TARGET_SIZEOF_VOID_P: u32 = 8;
pub const GRUB_TARGET_SIZEOF_LONG: u32 = 8;
pub const GRUB_HAVE_UNALIGNED_ACCESS: u32 = 1;
pub const GRUB_CPU_SIZEOF_VOID_P: u32 = 8;
pub const GRUB_CPU_SIZEOF_LONG: u32 = 8;
pub const GRUB_TARGET_WORDSIZE: u32 = 64;
pub const PRIxGRUB_INT32_T: &'static [u8; 2usize] = b"x\0";
pub const PRIdGRUB_INT32_T: &'static [u8; 2usize] = b"d\0";
pub const PRIxGRUB_INT64_T: &'static [u8; 3usize] = b"lx\0";
pub const PRIdGRUB_INT64_T: &'static [u8; 3usize] = b"ld\0";
pub const PRIxGRUB_UINT32_T: &'static [u8; 2usize] = b"x\0";
pub const PRIuGRUB_UINT32_T: &'static [u8; 2usize] = b"u\0";
pub const PRIxGRUB_UINT64_T: &'static [u8; 3usize] = b"lx\0";
pub const PRIuGRUB_UINT64_T: &'static [u8; 3usize] = b"lu\0";
pub const GRUB_SIZE_MAX: i32 = -1;
pub const PRIxGRUB_SIZE: &'static [u8; 3usize] = b"lx\0";
pub const PRIxGRUB_ADDR: &'static [u8; 3usize] = b"lx\0";
pub const PRIuGRUB_SIZE: &'static [u8; 3usize] = b"lu\0";
pub const PRIdGRUB_SSIZE: &'static [u8; 3usize] = b"ld\0";
pub const GRUB_SCHAR_MAX: u32 = 127;
pub const GRUB_SCHAR_MIN: i32 = -128;
pub const GRUB_UCHAR_MAX: u32 = 255;
pub const GRUB_USHRT_MAX: u32 = 65535;
pub const GRUB_SHRT_MAX: u32 = 32767;
pub const GRUB_SHRT_MIN: i32 = -32768;
pub const GRUB_UINT_MAX: u32 = 4294967295;
pub const GRUB_INT_MAX: u32 = 2147483647;
pub const GRUB_INT_MIN: i32 = -2147483648;
pub const GRUB_INT32_MAX: u32 = 2147483647;
pub const GRUB_INT32_MIN: i32 = -2147483648;
pub const GRUB_ULONG_MAX: i32 = -1;
pub const GRUB_LONG_MAX: u64 = 9223372036854775807;
pub const GRUB_LONG_MIN: i64 = -9223372036854775808;
pub const GRUB_SYMBOL_HEADER: u32 = 1;
pub const GRUB_MISC_HEADER: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const GRUB_ERR_HEADER: u32 = 1;
pub const GRUB_COMPILER_HEADER: u32 = 1;
pub const GRUB_MAX_ERRMSG: u32 = 256;
pub const GRUB_I18N_H: u32 = 1;
pub const GRUB_DIVISION_IN_SOFTWARE: u32 = 0;
pub const grub_no_modules: u32 = 0;
pub const GRUB_NORMAL_HEADER: u32 = 1;
pub const GRUB_TERM_HEADER: u32 = 1;
pub const GRUB_TERM_NO_KEY: u32 = 0;
pub const GRUB_TERM_SHIFT: u32 = 16777216;
pub const GRUB_TERM_CTRL: u32 = 33554432;
pub const GRUB_TERM_ALT: u32 = 67108864;
pub const GRUB_TERM_EXTENDED: u32 = 8388608;
pub const GRUB_TERM_KEY_MASK: u32 = 16777215;
pub const GRUB_TERM_KEY_LEFT: u32 = 8388683;
pub const GRUB_TERM_KEY_RIGHT: u32 = 8388685;
pub const GRUB_TERM_KEY_UP: u32 = 8388680;
pub const GRUB_TERM_KEY_DOWN: u32 = 8388688;
pub const GRUB_TERM_KEY_HOME: u32 = 8388679;
pub const GRUB_TERM_KEY_END: u32 = 8388687;
pub const GRUB_TERM_KEY_DC: u32 = 8388691;
pub const GRUB_TERM_KEY_PPAGE: u32 = 8388681;
pub const GRUB_TERM_KEY_NPAGE: u32 = 8388689;
pub const GRUB_TERM_KEY_F1: u32 = 8388667;
pub const GRUB_TERM_KEY_F2: u32 = 8388668;
pub const GRUB_TERM_KEY_F3: u32 = 8388669;
pub const GRUB_TERM_KEY_F4: u32 = 8388670;
pub const GRUB_TERM_KEY_F5: u32 = 8388671;
pub const GRUB_TERM_KEY_F6: u32 = 8388672;
pub const GRUB_TERM_KEY_F7: u32 = 8388673;
pub const GRUB_TERM_KEY_F8: u32 = 8388674;
pub const GRUB_TERM_KEY_F9: u32 = 8388675;
pub const GRUB_TERM_KEY_F10: u32 = 8388676;
pub const GRUB_TERM_KEY_F11: u32 = 8388695;
pub const GRUB_TERM_KEY_F12: u32 = 8388696;
pub const GRUB_TERM_KEY_INSERT: u32 = 8388690;
pub const GRUB_TERM_KEY_CENTER: u32 = 8388684;
pub const GRUB_TERM_ESC: u32 = 27;
pub const GRUB_TERM_TAB: u8 = 9u8;
pub const GRUB_TERM_BACKSPACE: u8 = 8u8;
pub const GRUB_PROGRESS_NO_UPDATE: i32 = -1;
pub const GRUB_PROGRESS_FAST: u32 = 0;
pub const GRUB_PROGRESS_SLOW: u32 = 2;
pub const GRUB_BIDI_HEADER: u32 = 1;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTE_MIRROR: u32 = 1;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTES_JOIN_LEFT_TO_RIGHT_SHIFT: u32 = 1;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED: u32 = 2;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTE_RIGHT_JOINED: u32 = 4;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTE_LEFT_JOINED_EXPLICIT: u32 = 8;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTE_RIGHT_JOINED_EXPLICIT: u32 = 16;
pub const GRUB_UNICODE_GLYPH_ATTRIBUTES_JOIN: u32 = 30;
pub const GRUB_UNICODE_MAX_CACHED_CHAR: u32 = 131072;
pub const GRUB_BIDI_MAX_EXPLICIT_LEVEL: u32 = 61;
pub const GRUB_LIST_HEADER: u32 = 1;
pub const GRUB_TERM_NO_ECHO: u32 = 1;
pub const GRUB_TERM_NO_EDIT: u32 = 2;
pub const GRUB_TERM_DUMB: u32 = 4;
pub const GRUB_TERM_CODE_TYPE_SHIFT: u32 = 3;
pub const GRUB_TERM_CODE_TYPE_MASK: u32 = 56;
pub const GRUB_TERM_CODE_TYPE_ASCII: u32 = 0;
pub const GRUB_TERM_CODE_TYPE_CP437: u32 = 8;
pub const GRUB_TERM_CODE_TYPE_UTF8_LOGICAL: u32 = 16;
pub const GRUB_TERM_CODE_TYPE_UTF8_VISUAL: u32 = 24;
pub const GRUB_TERM_CODE_TYPE_VISUAL_GLYPHS: u32 = 32;
pub const GRUB_TERM_STATUS_RSHIFT: u32 = 1;
pub const GRUB_TERM_STATUS_LSHIFT: u32 = 2;
pub const GRUB_TERM_STATUS_RCTRL: u32 = 4;
pub const GRUB_TERM_STATUS_RALT: u32 = 8;
pub const GRUB_TERM_STATUS_SCROLL: u32 = 16;
pub const GRUB_TERM_STATUS_NUM: u32 = 32;
pub const GRUB_TERM_STATUS_CAPS: u32 = 64;
pub const GRUB_TERM_STATUS_LCTRL: u32 = 256;
pub const GRUB_TERM_STATUS_LALT: u32 = 512;
pub const GRUB_TERM_MARGIN: u32 = 1;
pub const GRUB_TERM_SCROLL_WIDTH: u32 = 1;
pub const GRUB_TERM_DEFAULT_NORMAL_COLOR: u32 = 7;
pub const GRUB_TERM_DEFAULT_HIGHLIGHT_COLOR: u32 = 112;
pub const GRUB_TERM_DEFAULT_STANDARD_COLOR: u32 = 7;
pub const GRUB_TERM_TAB_WIDTH: u32 = 8;
pub const GRUB_TERM_REPEAT_PRE_INTERVAL: u32 = 400;
pub const GRUB_TERM_REPEAT_INTERVAL: u32 = 50;
pub const GRUB_ENV_HEADER: u32 = 1;
pub const GRUB_MENU_HEADER: u32 = 1;
pub const GRUB_COMMAND_HEADER: u32 = 1;
pub const GRUB_COMMAND_PRIO_MASK: u32 = 255;
pub const GRUB_COMMAND_FLAG_ACTIVE: u32 = 256;
pub const GRUB_FILE_HEADER: u32 = 1;
pub const GRUB_DEVICE_HEADER: u32 = 1;
pub const GRUB_FS_HEADER: u32 = 1;
pub const GRUB_DISK_HEADER: u32 = 1;
pub const GRUB_DISK_SECTOR_SIZE: u32 = 512;
pub const GRUB_DISK_SECTOR_BITS: u32 = 9;
pub const GRUB_DISK_MAX_SECTORS: u64 = 2251799813685248;
pub const GRUB_DISK_CACHE_NUM: u32 = 1021;
pub const GRUB_DISK_CACHE_BITS: u32 = 6;
pub const GRUB_DISK_CACHE_SIZE: u32 = 64;
pub const GRUB_DISK_MAX_MAX_AGGLOMERATE: u32 = 32767;
pub const GRUB_DISK_SIZE_UNKNOWN: i32 = -1;
pub const GRUB_FILE_SIZE_UNKNOWN: i32 = -1;
pub const STANDARD_MARGIN: u32 = 6;
pub const GRUB_DL_H: u32 = 1;
pub const GRUB_ELF_H: u32 = 1;
pub const EI_NIDENT: u32 = 16;
pub const EI_MAG0: u32 = 0;
pub const ELFMAG0: u32 = 127;
pub const EI_MAG1: u32 = 1;
pub const ELFMAG1: u8 = 69u8;
pub const EI_MAG2: u32 = 2;
pub const ELFMAG2: u8 = 76u8;
pub const EI_MAG3: u32 = 3;
pub const ELFMAG3: u8 = 70u8;
pub const ELFMAG: &'static [u8; 5usize] = b"\x7FELF\0";
pub const SELFMAG: u32 = 4;
pub const EI_CLASS: u32 = 4;
pub const ELFCLASSNONE: u32 = 0;
pub const ELFCLASS32: u32 = 1;
pub const ELFCLASS64: u32 = 2;
pub const ELFCLASSNUM: u32 = 3;
pub const EI_DATA: u32 = 5;
pub const ELFDATANONE: u32 = 0;
pub const ELFDATA2LSB: u32 = 1;
pub const ELFDATA2MSB: u32 = 2;
pub const ELFDATANUM: u32 = 3;
pub const EI_VERSION: u32 = 6;
pub const EI_OSABI: u32 = 7;
pub const ELFOSABI_NONE: u32 = 0;
pub const ELFOSABI_SYSV: u32 = 0;
pub const ELFOSABI_HPUX: u32 = 1;
pub const ELFOSABI_NETBSD: u32 = 2;
pub const ELFOSABI_LINUX: u32 = 3;
pub const ELFOSABI_SOLARIS: u32 = 6;
pub const ELFOSABI_AIX: u32 = 7;
pub const ELFOSABI_IRIX: u32 = 8;
pub const ELFOSABI_FREEBSD: u32 = 9;
pub const ELFOSABI_TRU64: u32 = 10;
pub const ELFOSABI_MODESTO: u32 = 11;
pub const ELFOSABI_OPENBSD: u32 = 12;
pub const ELFOSABI_ARM_AEABI: u32 = 64;
pub const ELFOSABI_ARM: u32 = 97;
pub const ELFOSABI_STANDALONE: u32 = 255;
pub const EI_ABIVERSION: u32 = 8;
pub const EI_PAD: u32 = 9;
pub const ET_NONE: u32 = 0;
pub const ET_REL: u32 = 1;
pub const ET_EXEC: u32 = 2;
pub const ET_DYN: u32 = 3;
pub const ET_CORE: u32 = 4;
pub const ET_NUM: u32 = 5;
pub const ET_LOOS: u32 = 65024;
pub const ET_HIOS: u32 = 65279;
pub const ET_LOPROC: u32 = 65280;
pub const ET_HIPROC: u32 = 65535;
pub const EM_NONE: u32 = 0;
pub const EM_M32: u32 = 1;
pub const EM_SPARC: u32 = 2;
pub const EM_386: u32 = 3;
pub const EM_68K: u32 = 4;
pub const EM_88K: u32 = 5;
pub const EM_860: u32 = 7;
pub const EM_MIPS: u32 = 8;
pub const EM_S370: u32 = 9;
pub const EM_MIPS_RS3_LE: u32 = 10;
pub const EM_PARISC: u32 = 15;
pub const EM_VPP500: u32 = 17;
pub const EM_SPARC32PLUS: u32 = 18;
pub const EM_960: u32 = 19;
pub const EM_PPC: u32 = 20;
pub const EM_PPC64: u32 = 21;
pub const EM_S390: u32 = 22;
pub const EM_V800: u32 = 36;
pub const EM_FR20: u32 = 37;
pub const EM_RH32: u32 = 38;
pub const EM_RCE: u32 = 39;
pub const EM_ARM: u32 = 40;
pub const EM_FAKE_ALPHA: u32 = 41;
pub const EM_SH: u32 = 42;
pub const EM_SPARCV9: u32 = 43;
pub const EM_TRICORE: u32 = 44;
pub const EM_ARC: u32 = 45;
pub const EM_H8_300: u32 = 46;
pub const EM_H8_300H: u32 = 47;
pub const EM_H8S: u32 = 48;
pub const EM_H8_500: u32 = 49;
pub const EM_IA_64: u32 = 50;
pub const EM_MIPS_X: u32 = 51;
pub const EM_COLDFIRE: u32 = 52;
pub const EM_68HC12: u32 = 53;
pub const EM_MMA: u32 = 54;
pub const EM_PCP: u32 = 55;
pub const EM_NCPU: u32 = 56;
pub const EM_NDR1: u32 = 57;
pub const EM_STARCORE: u32 = 58;
pub const EM_ME16: u32 = 59;
pub const EM_ST100: u32 = 60;
pub const EM_TINYJ: u32 = 61;
pub const EM_X86_64: u32 = 62;
pub const EM_PDSP: u32 = 63;
pub const EM_FX66: u32 = 66;
pub const EM_ST9PLUS: u32 = 67;
pub const EM_ST7: u32 = 68;
pub const EM_68HC16: u32 = 69;
pub const EM_68HC11: u32 = 70;
pub const EM_68HC08: u32 = 71;
pub const EM_68HC05: u32 = 72;
pub const EM_SVX: u32 = 73;
pub const EM_AT19: u32 = 74;
pub const EM_VAX: u32 = 75;
pub const EM_CRIS: u32 = 76;
pub const EM_JAVELIN: u32 = 77;
pub const EM_FIREPATH: u32 = 78;
pub const EM_ZSP: u32 = 79;
pub const EM_MMIX: u32 = 80;
pub const EM_HUANY: u32 = 81;
pub const EM_PRISM: u32 = 82;
pub const EM_AVR: u32 = 83;
pub const EM_FR30: u32 = 84;
pub const EM_D10V: u32 = 85;
pub const EM_D30V: u32 = 86;
pub const EM_V850: u32 = 87;
pub const EM_M32R: u32 = 88;
pub const EM_MN10300: u32 = 89;
pub const EM_MN10200: u32 = 90;
pub const EM_PJ: u32 = 91;
pub const EM_OPENRISC: u32 = 92;
pub const EM_ARC_A5: u32 = 93;
pub const EM_XTENSA: u32 = 94;
pub const EM_NUM: u32 = 95;
pub const EM_AARCH64: u32 = 183;
pub const EM_RISCV: u32 = 243;
pub const EM_ALPHA: u32 = 36902;
pub const EV_NONE: u32 = 0;
pub const EV_CURRENT: u32 = 1;
pub const EV_NUM: u32 = 2;
pub const SHN_UNDEF: u32 = 0;
pub const SHN_LORESERVE: u32 = 65280;
pub const SHN_LOPROC: u32 = 65280;
pub const SHN_HIPROC: u32 = 65311;
pub const SHN_LOOS: u32 = 65312;
pub const SHN_HIOS: u32 = 65343;
pub const SHN_ABS: u32 = 65521;
pub const SHN_COMMON: u32 = 65522;
pub const SHN_XINDEX: u32 = 65535;
pub const SHN_HIRESERVE: u32 = 65535;
pub const SHT_NULL: u32 = 0;
pub const SHT_PROGBITS: u32 = 1;
pub const SHT_SYMTAB: u32 = 2;
pub const SHT_STRTAB: u32 = 3;
pub const SHT_RELA: u32 = 4;
pub const SHT_HASH: u32 = 5;
pub const SHT_DYNAMIC: u32 = 6;
pub const SHT_NOTE: u32 = 7;
pub const SHT_NOBITS: u32 = 8;
pub const SHT_REL: u32 = 9;
pub const SHT_SHLIB: u32 = 10;
pub const SHT_DYNSYM: u32 = 11;
pub const SHT_INIT_ARRAY: u32 = 14;
pub const SHT_FINI_ARRAY: u32 = 15;
pub const SHT_PREINIT_ARRAY: u32 = 16;
pub const SHT_GROUP: u32 = 17;
pub const SHT_SYMTAB_SHNDX: u32 = 18;
pub const SHT_NUM: u32 = 19;
pub const SHT_LOOS: u32 = 1610612736;
pub const SHT_GNU_LIBLIST: u32 = 1879048183;
pub const SHT_CHECKSUM: u32 = 1879048184;
pub const SHT_LOSUNW: u32 = 1879048186;
pub const SHT_SUNW_move: u32 = 1879048186;
pub const SHT_SUNW_COMDAT: u32 = 1879048187;
pub const SHT_SUNW_syminfo: u32 = 1879048188;
pub const SHT_GNU_verdef: u32 = 1879048189;
pub const SHT_GNU_verneed: u32 = 1879048190;
pub const SHT_GNU_versym: u32 = 1879048191;
pub const SHT_HISUNW: u32 = 1879048191;
pub const SHT_HIOS: u32 = 1879048191;
pub const SHT_LOPROC: u32 = 1879048192;
pub const SHT_HIPROC: u32 = 2147483647;
pub const SHT_LOUSER: u32 = 2147483648;
pub const SHT_HIUSER: u32 = 2415919103;
pub const SHF_WRITE: u32 = 1;
pub const SHF_ALLOC: u32 = 2;
pub const SHF_EXECINSTR: u32 = 4;
pub const SHF_MERGE: u32 = 16;
pub const SHF_STRINGS: u32 = 32;
pub const SHF_INFO_LINK: u32 = 64;
pub const SHF_LINK_ORDER: u32 = 128;
pub const SHF_OS_NONCONFORMING: u32 = 256;
pub const SHF_GROUP: u32 = 512;
pub const SHF_TLS: u32 = 1024;
pub const SHF_MASKOS: u32 = 267386880;
pub const SHF_MASKPROC: u32 = 4026531840;
pub const GRP_COMDAT: u32 = 1;
pub const SYMINFO_BT_SELF: u32 = 65535;
pub const SYMINFO_BT_PARENT: u32 = 65534;
pub const SYMINFO_BT_LOWRESERVE: u32 = 65280;
pub const SYMINFO_FLG_DIRECT: u32 = 1;
pub const SYMINFO_FLG_PASSTHRU: u32 = 2;
pub const SYMINFO_FLG_COPY: u32 = 4;
pub const SYMINFO_FLG_LAZYLOAD: u32 = 8;
pub const SYMINFO_NONE: u32 = 0;
pub const SYMINFO_CURRENT: u32 = 1;
pub const SYMINFO_NUM: u32 = 2;
pub const STB_LOCAL: u32 = 0;
pub const STB_GLOBAL: u32 = 1;
pub const STB_WEAK: u32 = 2;
pub const STB_NUM: u32 = 3;
pub const STB_LOOS: u32 = 10;
pub const STB_HIOS: u32 = 12;
pub const STB_LOPROC: u32 = 13;
pub const STB_HIPROC: u32 = 15;
pub const STT_NOTYPE: u32 = 0;
pub const STT_OBJECT: u32 = 1;
pub const STT_FUNC: u32 = 2;
pub const STT_SECTION: u32 = 3;
pub const STT_FILE: u32 = 4;
pub const STT_COMMON: u32 = 5;
pub const STT_TLS: u32 = 6;
pub const STT_NUM: u32 = 7;
pub const STT_LOOS: u32 = 10;
pub const STT_HIOS: u32 = 12;
pub const STT_LOPROC: u32 = 13;
pub const STT_HIPROC: u32 = 15;
pub const STN_UNDEF: u32 = 0;
pub const STN_ABS: u32 = 65521;
pub const STV_DEFAULT: u32 = 0;
pub const STV_INTERNAL: u32 = 1;
pub const STV_HIDDEN: u32 = 2;
pub const STV_PROTECTED: u32 = 3;
pub const PT_NULL: u32 = 0;
pub const PT_LOAD: u32 = 1;
pub const PT_DYNAMIC: u32 = 2;
pub const PT_INTERP: u32 = 3;
pub const PT_NOTE: u32 = 4;
pub const PT_SHLIB: u32 = 5;
pub const PT_PHDR: u32 = 6;
pub const PT_TLS: u32 = 7;
pub const PT_NUM: u32 = 8;
pub const PT_LOOS: u32 = 1610612736;
pub const PT_GNU_EH_FRAME: u32 = 1685382480;
pub const PT_GNU_STACK: u32 = 1685382481;
pub const PT_LOSUNW: u32 = 1879048186;
pub const PT_SUNWBSS: u32 = 1879048186;
pub const PT_SUNWSTACK: u32 = 1879048187;
pub const PT_HISUNW: u32 = 1879048191;
pub const PT_HIOS: u32 = 1879048191;
pub const PT_LOPROC: u32 = 1879048192;
pub const PT_HIPROC: u32 = 2147483647;
pub const PF_X: u32 = 1;
pub const PF_W: u32 = 2;
pub const PF_R: u32 = 4;
pub const PF_MASKOS: u32 = 267386880;
pub const PF_MASKPROC: u32 = 4026531840;
pub const NT_PRSTATUS: u32 = 1;
pub const NT_FPREGSET: u32 = 2;
pub const NT_PRPSINFO: u32 = 3;
pub const NT_PRXREG: u32 = 4;
pub const NT_PLATFORM: u32 = 5;
pub const NT_AUXV: u32 = 6;
pub const NT_GWINDOWS: u32 = 7;
pub const NT_ASRS: u32 = 8;
pub const NT_PSTATUS: u32 = 10;
pub const NT_PSINFO: u32 = 13;
pub const NT_PRCRED: u32 = 14;
pub const NT_UTSNAME: u32 = 15;
pub const NT_LWPSTATUS: u32 = 16;
pub const NT_LWPSINFO: u32 = 17;
pub const NT_PRFPXREG: u32 = 20;
pub const NT_VERSION: u32 = 1;
pub const DT_NULL: u32 = 0;
pub const DT_NEEDED: u32 = 1;
pub const DT_PLTRELSZ: u32 = 2;
pub const DT_PLTGOT: u32 = 3;
pub const DT_HASH: u32 = 4;
pub const DT_STRTAB: u32 = 5;
pub const DT_SYMTAB: u32 = 6;
pub const DT_RELA: u32 = 7;
pub const DT_RELASZ: u32 = 8;
pub const DT_RELAENT: u32 = 9;
pub const DT_STRSZ: u32 = 10;
pub const DT_SYMENT: u32 = 11;
pub const DT_INIT: u32 = 12;
pub const DT_FINI: u32 = 13;
pub const DT_SONAME: u32 = 14;
pub const DT_RPATH: u32 = 15;
pub const DT_SYMBOLIC: u32 = 16;
pub const DT_REL: u32 = 17;
pub const DT_RELSZ: u32 = 18;
pub const DT_RELENT: u32 = 19;
pub const DT_PLTREL: u32 = 20;
pub const DT_DEBUG: u32 = 21;
pub const DT_TEXTREL: u32 = 22;
pub const DT_JMPREL: u32 = 23;
pub const DT_BIND_NOW: u32 = 24;
pub const DT_INIT_ARRAY: u32 = 25;
pub const DT_FINI_ARRAY: u32 = 26;
pub const DT_INIT_ARRAYSZ: u32 = 27;
pub const DT_FINI_ARRAYSZ: u32 = 28;
pub const DT_RUNPATH: u32 = 29;
pub const DT_FLAGS: u32 = 30;
pub const DT_ENCODING: u32 = 32;
pub const DT_PREINIT_ARRAY: u32 = 32;
pub const DT_PREINIT_ARRAYSZ: u32 = 33;
pub const DT_NUM: u32 = 34;
pub const DT_LOOS: u32 = 1610612749;
pub const DT_HIOS: u32 = 1879044096;
pub const DT_LOPROC: u32 = 1879048192;
pub const DT_HIPROC: u32 = 2147483647;
pub const DT_VALRNGLO: u32 = 1879047424;
pub const DT_GNU_PRELINKED: u32 = 1879047669;
pub const DT_GNU_CONFLICTSZ: u32 = 1879047670;
pub const DT_GNU_LIBLISTSZ: u32 = 1879047671;
pub const DT_CHECKSUM: u32 = 1879047672;
pub const DT_PLTPADSZ: u32 = 1879047673;
pub const DT_MOVEENT: u32 = 1879047674;
pub const DT_MOVESZ: u32 = 1879047675;
pub const DT_FEATURE_1: u32 = 1879047676;
pub const DT_POSFLAG_1: u32 = 1879047677;
pub const DT_SYMINSZ: u32 = 1879047678;
pub const DT_SYMINENT: u32 = 1879047679;
pub const DT_VALRNGHI: u32 = 1879047679;
pub const DT_VALNUM: u32 = 12;
pub const DT_ADDRRNGLO: u32 = 1879047680;
pub const DT_GNU_CONFLICT: u32 = 1879047928;
pub const DT_GNU_LIBLIST: u32 = 1879047929;
pub const DT_CONFIG: u32 = 1879047930;
pub const DT_DEPAUDIT: u32 = 1879047931;
pub const DT_AUDIT: u32 = 1879047932;
pub const DT_PLTPAD: u32 = 1879047933;
pub const DT_MOVETAB: u32 = 1879047934;
pub const DT_SYMINFO: u32 = 1879047935;
pub const DT_ADDRRNGHI: u32 = 1879047935;
pub const DT_ADDRNUM: u32 = 10;
pub const DT_VERSYM: u32 = 1879048176;
pub const DT_RELACOUNT: u32 = 1879048185;
pub const DT_RELCOUNT: u32 = 1879048186;
pub const DT_FLAGS_1: u32 = 1879048187;
pub const DT_VERDEF: u32 = 1879048188;
pub const DT_VERDEFNUM: u32 = 1879048189;
pub const DT_VERNEED: u32 = 1879048190;
pub const DT_VERNEEDNUM: u32 = 1879048191;
pub const DT_VERSIONTAGNUM: u32 = 16;
pub const DT_AUXILIARY: u32 = 2147483645;
pub const DT_FILTER: u32 = 2147483647;
pub const DT_EXTRANUM: u32 = 3;
pub const DF_ORIGIN: u32 = 1;
pub const DF_SYMBOLIC: u32 = 2;
pub const DF_TEXTREL: u32 = 4;
pub const DF_BIND_NOW: u32 = 8;
pub const DF_STATIC_TLS: u32 = 16;
pub const DF_1_NOW: u32 = 1;
pub const DF_1_GLOBAL: u32 = 2;
pub const DF_1_GROUP: u32 = 4;
pub const DF_1_NODELETE: u32 = 8;
pub const DF_1_LOADFLTR: u32 = 16;
pub const DF_1_INITFIRST: u32 = 32;
pub const DF_1_NOOPEN: u32 = 64;
pub const DF_1_ORIGIN: u32 = 128;
pub const DF_1_DIRECT: u32 = 256;
pub const DF_1_TRANS: u32 = 512;
pub const DF_1_INTERPOSE: u32 = 1024;
pub const DF_1_NODEFLIB: u32 = 2048;
pub const DF_1_NODUMP: u32 = 4096;
pub const DF_1_CONFALT: u32 = 8192;
pub const DF_1_ENDFILTEE: u32 = 16384;
pub const DF_1_DISPRELDNE: u32 = 32768;
pub const DF_1_DISPRELPND: u32 = 65536;
pub const DTF_1_PARINIT: u32 = 1;
pub const DTF_1_CONFEXP: u32 = 2;
pub const DF_P1_LAZYLOAD: u32 = 1;
pub const DF_P1_GROUPPERM: u32 = 2;
pub const VER_DEF_NONE: u32 = 0;
pub const VER_DEF_CURRENT: u32 = 1;
pub const VER_DEF_NUM: u32 = 2;
pub const VER_FLG_BASE: u32 = 1;
pub const VER_FLG_WEAK: u32 = 2;
pub const VER_NDX_LOCAL: u32 = 0;
pub const VER_NDX_GLOBAL: u32 = 1;
pub const VER_NDX_LORESERVE: u32 = 65280;
pub const VER_NDX_ELIMINATE: u32 = 65281;
pub const VER_NEED_NONE: u32 = 0;
pub const VER_NEED_CURRENT: u32 = 1;
pub const VER_NEED_NUM: u32 = 2;
pub const AT_NULL: u32 = 0;
pub const AT_IGNORE: u32 = 1;
pub const AT_EXECFD: u32 = 2;
pub const AT_PHDR: u32 = 3;
pub const AT_PHENT: u32 = 4;
pub const AT_PHNUM: u32 = 5;
pub const AT_PAGESZ: u32 = 6;
pub const AT_BASE: u32 = 7;
pub const AT_FLAGS: u32 = 8;
pub const AT_ENTRY: u32 = 9;
pub const AT_NOTELF: u32 = 10;
pub const AT_UID: u32 = 11;
pub const AT_EUID: u32 = 12;
pub const AT_GID: u32 = 13;
pub const AT_EGID: u32 = 14;
pub const AT_CLKTCK: u32 = 17;
pub const AT_PLATFORM: u32 = 15;
pub const AT_HWCAP: u32 = 16;
pub const AT_FPUCW: u32 = 18;
pub const AT_DCACHEBSIZE: u32 = 19;
pub const AT_ICACHEBSIZE: u32 = 20;
pub const AT_UCACHEBSIZE: u32 = 21;
pub const AT_IGNOREPPC: u32 = 22;
pub const ELF_NOTE_SOLARIS: &'static [u8; 13usize] = b"SUNW Solaris\0";
pub const ELF_NOTE_GNU: &'static [u8; 4usize] = b"GNU\0";
pub const ELF_NOTE_PAGESIZE_HINT: u32 = 1;
pub const ELF_NOTE_ABI: u32 = 1;
pub const ELF_NOTE_OS_LINUX: u32 = 0;
pub const ELF_NOTE_OS_GNU: u32 = 1;
pub const ELF_NOTE_OS_SOLARIS2: u32 = 2;
pub const EF_CPU32: u32 = 8454144;
pub const R_68K_NONE: u32 = 0;
pub const R_68K_32: u32 = 1;
pub const R_68K_16: u32 = 2;
pub const R_68K_8: u32 = 3;
pub const R_68K_PC32: u32 = 4;
pub const R_68K_PC16: u32 = 5;
pub const R_68K_PC8: u32 = 6;
pub const R_68K_GOT32: u32 = 7;
pub const R_68K_GOT16: u32 = 8;
pub const R_68K_GOT8: u32 = 9;
pub const R_68K_GOT32O: u32 = 10;
pub const R_68K_GOT16O: u32 = 11;
pub const R_68K_GOT8O: u32 = 12;
pub const R_68K_PLT32: u32 = 13;
pub const R_68K_PLT16: u32 = 14;
pub const R_68K_PLT8: u32 = 15;
pub const R_68K_PLT32O: u32 = 16;
pub const R_68K_PLT16O: u32 = 17;
pub const R_68K_PLT8O: u32 = 18;
pub const R_68K_COPY: u32 = 19;
pub const R_68K_GLOB_DAT: u32 = 20;
pub const R_68K_JMP_SLOT: u32 = 21;
pub const R_68K_RELATIVE: u32 = 22;
pub const R_68K_NUM: u32 = 23;
pub const R_386_NONE: u32 = 0;
pub const R_386_32: u32 = 1;
pub const R_386_PC32: u32 = 2;
pub const R_386_GOT32: u32 = 3;
pub const R_386_PLT32: u32 = 4;
pub const R_386_COPY: u32 = 5;
pub const R_386_GLOB_DAT: u32 = 6;
pub const R_386_JMP_SLOT: u32 = 7;
pub const R_386_RELATIVE: u32 = 8;
pub const R_386_GOTOFF: u32 = 9;
pub const R_386_GOTPC: u32 = 10;
pub const R_386_32PLT: u32 = 11;
pub const R_386_TLS_TPOFF: u32 = 14;
pub const R_386_TLS_IE: u32 = 15;
pub const R_386_TLS_GOTIE: u32 = 16;
pub const R_386_TLS_LE: u32 = 17;
pub const R_386_TLS_GD: u32 = 18;
pub const R_386_TLS_LDM: u32 = 19;
pub const R_386_16: u32 = 20;
pub const R_386_PC16: u32 = 21;
pub const R_386_8: u32 = 22;
pub const R_386_PC8: u32 = 23;
pub const R_386_TLS_GD_32: u32 = 24;
pub const R_386_TLS_GD_PUSH: u32 = 25;
pub const R_386_TLS_GD_CALL: u32 = 26;
pub const R_386_TLS_GD_POP: u32 = 27;
pub const R_386_TLS_LDM_32: u32 = 28;
pub const R_386_TLS_LDM_PUSH: u32 = 29;
pub const R_386_TLS_LDM_CALL: u32 = 30;
pub const R_386_TLS_LDM_POP: u32 = 31;
pub const R_386_TLS_LDO_32: u32 = 32;
pub const R_386_TLS_IE_32: u32 = 33;
pub const R_386_TLS_LE_32: u32 = 34;
pub const R_386_TLS_DTPMOD32: u32 = 35;
pub const R_386_TLS_DTPOFF32: u32 = 36;
pub const R_386_TLS_TPOFF32: u32 = 37;
pub const R_386_NUM: u32 = 38;
pub const R_X86_64_NONE: u32 = 0;
pub const R_X86_64_64: u32 = 1;
pub const R_X86_64_PC32: u32 = 2;
pub const R_X86_64_GOT32: u32 = 3;
pub const R_X86_64_PLT32: u32 = 4;
pub const R_X86_64_COPY: u32 = 5;
pub const R_X86_64_GLOB_DAT: u32 = 6;
pub const R_X86_64_JUMP_SLOT: u32 = 7;
pub const R_X86_64_RELATIVE: u32 = 8;
pub const R_X86_64_GOTPCREL: u32 = 9;
pub const R_X86_64_32: u32 = 10;
pub const R_X86_64_32S: u32 = 11;
pub const R_X86_64_16: u32 = 12;
pub const R_X86_64_PC16: u32 = 13;
pub const R_X86_64_8: u32 = 14;
pub const R_X86_64_PC8: u32 = 15;
pub const R_X86_64_PC64: u32 = 24;
pub const STT_REGISTER: u32 = 13;
pub const EF_SPARCV9_MM: u32 = 3;
pub const EF_SPARCV9_TSO: u32 = 0;
pub const EF_SPARCV9_PSO: u32 = 1;
pub const EF_SPARCV9_RMO: u32 = 2;
pub const EF_SPARC_LEDATA: u32 = 8388608;
pub const EF_SPARC_EXT_MASK: u32 = 16776960;
pub const EF_SPARC_32PLUS: u32 = 256;
pub const EF_SPARC_SUN_US1: u32 = 512;
pub const EF_SPARC_HAL_R1: u32 = 1024;
pub const EF_SPARC_SUN_US3: u32 = 2048;
pub const R_SPARC_NONE: u32 = 0;
pub const R_SPARC_8: u32 = 1;
pub const R_SPARC_16: u32 = 2;
pub const R_SPARC_32: u32 = 3;
pub const R_SPARC_DISP8: u32 = 4;
pub const R_SPARC_DISP16: u32 = 5;
pub const R_SPARC_DISP32: u32 = 6;
pub const R_SPARC_WDISP30: u32 = 7;
pub const R_SPARC_WDISP22: u32 = 8;
pub const R_SPARC_HI22: u32 = 9;
pub const R_SPARC_22: u32 = 10;
pub const R_SPARC_13: u32 = 11;
pub const R_SPARC_LO10: u32 = 12;
pub const R_SPARC_GOT10: u32 = 13;
pub const R_SPARC_GOT13: u32 = 14;
pub const R_SPARC_GOT22: u32 = 15;
pub const R_SPARC_PC10: u32 = 16;
pub const R_SPARC_PC22: u32 = 17;
pub const R_SPARC_WPLT30: u32 = 18;
pub const R_SPARC_COPY: u32 = 19;
pub const R_SPARC_GLOB_DAT: u32 = 20;
pub const R_SPARC_JMP_SLOT: u32 = 21;
pub const R_SPARC_RELATIVE: u32 = 22;
pub const R_SPARC_UA32: u32 = 23;
pub const R_SPARC_PLT32: u32 = 24;
pub const R_SPARC_HIPLT22: u32 = 25;
pub const R_SPARC_LOPLT10: u32 = 26;
pub const R_SPARC_PCPLT32: u32 = 27;
pub const R_SPARC_PCPLT22: u32 = 28;
pub const R_SPARC_PCPLT10: u32 = 29;
pub const R_SPARC_10: u32 = 30;
pub const R_SPARC_11: u32 = 31;
pub const R_SPARC_64: u32 = 32;
pub const R_SPARC_OLO10: u32 = 33;
pub const R_SPARC_HH22: u32 = 34;
pub const R_SPARC_HM10: u32 = 35;
pub const R_SPARC_LM22: u32 = 36;
pub const R_SPARC_PC_HH22: u32 = 37;
pub const R_SPARC_PC_HM10: u32 = 38;
pub const R_SPARC_PC_LM22: u32 = 39;
pub const R_SPARC_WDISP16: u32 = 40;
pub const R_SPARC_WDISP19: u32 = 41;
pub const R_SPARC_7: u32 = 43;
pub const R_SPARC_5: u32 = 44;
pub const R_SPARC_6: u32 = 45;
pub const R_SPARC_DISP64: u32 = 46;
pub const R_SPARC_PLT64: u32 = 47;
pub const R_SPARC_HIX22: u32 = 48;
pub const R_SPARC_LOX10: u32 = 49;
pub const R_SPARC_H44: u32 = 50;
pub const R_SPARC_M44: u32 = 51;
pub const R_SPARC_L44: u32 = 52;
pub const R_SPARC_REGISTER: u32 = 53;
pub const R_SPARC_UA64: u32 = 54;
pub const R_SPARC_UA16: u32 = 55;
pub const R_SPARC_TLS_GD_HI22: u32 = 56;
pub const R_SPARC_TLS_GD_LO10: u32 = 57;
pub const R_SPARC_TLS_GD_ADD: u32 = 58;
pub const R_SPARC_TLS_GD_CALL: u32 = 59;
pub const R_SPARC_TLS_LDM_HI22: u32 = 60;
pub const R_SPARC_TLS_LDM_LO10: u32 = 61;
pub const R_SPARC_TLS_LDM_ADD: u32 = 62;
pub const R_SPARC_TLS_LDM_CALL: u32 = 63;
pub const R_SPARC_TLS_LDO_HIX22: u32 = 64;
pub const R_SPARC_TLS_LDO_LOX10: u32 = 65;
pub const R_SPARC_TLS_LDO_ADD: u32 = 66;
pub const R_SPARC_TLS_IE_HI22: u32 = 67;
pub const R_SPARC_TLS_IE_LO10: u32 = 68;
pub const R_SPARC_TLS_IE_LD: u32 = 69;
pub const R_SPARC_TLS_IE_LDX: u32 = 70;
pub const R_SPARC_TLS_IE_ADD: u32 = 71;
pub const R_SPARC_TLS_LE_HIX22: u32 = 72;
pub const R_SPARC_TLS_LE_LOX10: u32 = 73;
pub const R_SPARC_TLS_DTPMOD32: u32 = 74;
pub const R_SPARC_TLS_DTPMOD64: u32 = 75;
pub const R_SPARC_TLS_DTPOFF32: u32 = 76;
pub const R_SPARC_TLS_DTPOFF64: u32 = 77;
pub const R_SPARC_TLS_TPOFF32: u32 = 78;
pub const R_SPARC_TLS_TPOFF64: u32 = 79;
pub const R_SPARC_NUM: u32 = 80;
pub const DT_SPARC_REGISTER: u32 = 1879048193;
pub const DT_SPARC_NUM: u32 = 2;
pub const HWCAP_SPARC_FLUSH: u32 = 1;
pub const HWCAP_SPARC_STBAR: u32 = 2;
pub const HWCAP_SPARC_SWAP: u32 = 4;
pub const HWCAP_SPARC_MULDIV: u32 = 8;
pub const HWCAP_SPARC_V9: u32 = 16;
pub const HWCAP_SPARC_ULTRA3: u32 = 32;
pub const EF_MIPS_NOREORDER: u32 = 1;
pub const EF_MIPS_PIC: u32 = 2;
pub const EF_MIPS_CPIC: u32 = 4;
pub const EF_MIPS_XGOT: u32 = 8;
pub const EF_MIPS_64BIT_WHIRL: u32 = 16;
pub const EF_MIPS_ABI2: u32 = 32;
pub const EF_MIPS_ABI_ON32: u32 = 64;
pub const EF_MIPS_ARCH: u32 = 4026531840;
pub const EF_MIPS_ARCH_1: u32 = 0;
pub const EF_MIPS_ARCH_2: u32 = 268435456;
pub const EF_MIPS_ARCH_3: u32 = 536870912;
pub const EF_MIPS_ARCH_4: u32 = 805306368;
pub const EF_MIPS_ARCH_5: u32 = 1073741824;
pub const EF_MIPS_ARCH_32: u32 = 1610612736;
pub const EF_MIPS_ARCH_64: u32 = 1879048192;
pub const E_MIPS_ARCH_1: u32 = 0;
pub const E_MIPS_ARCH_2: u32 = 268435456;
pub const E_MIPS_ARCH_3: u32 = 536870912;
pub const E_MIPS_ARCH_4: u32 = 805306368;
pub const E_MIPS_ARCH_5: u32 = 1073741824;
pub const E_MIPS_ARCH_32: u32 = 1610612736;
pub const E_MIPS_ARCH_64: u32 = 1879048192;
pub const SHN_MIPS_ACOMMON: u32 = 65280;
pub const SHN_MIPS_TEXT: u32 = 65281;
pub const SHN_MIPS_DATA: u32 = 65282;
pub const SHN_MIPS_SCOMMON: u32 = 65283;
pub const SHN_MIPS_SUNDEFINED: u32 = 65284;
pub const SHT_MIPS_LIBLIST: u32 = 1879048192;
pub const SHT_MIPS_MSYM: u32 = 1879048193;
pub const SHT_MIPS_CONFLICT: u32 = 1879048194;
pub const SHT_MIPS_GPTAB: u32 = 1879048195;
pub const SHT_MIPS_UCODE: u32 = 1879048196;
pub const SHT_MIPS_DEBUG: u32 = 1879048197;
pub const SHT_MIPS_REGINFO: u32 = 1879048198;
pub const SHT_MIPS_PACKAGE: u32 = 1879048199;
pub const SHT_MIPS_PACKSYM: u32 = 1879048200;
pub const SHT_MIPS_RELD: u32 = 1879048201;
pub const SHT_MIPS_IFACE: u32 = 1879048203;
pub const SHT_MIPS_CONTENT: u32 = 1879048204;
pub const SHT_MIPS_OPTIONS: u32 = 1879048205;
pub const SHT_MIPS_SHDR: u32 = 1879048208;
pub const SHT_MIPS_FDESC: u32 = 1879048209;
pub const SHT_MIPS_EXTSYM: u32 = 1879048210;
pub const SHT_MIPS_DENSE: u32 = 1879048211;
pub const SHT_MIPS_PDESC: u32 = 1879048212;
pub const SHT_MIPS_LOCSYM: u32 = 1879048213;
pub const SHT_MIPS_AUXSYM: u32 = 1879048214;
pub const SHT_MIPS_OPTSYM: u32 = 1879048215;
pub const SHT_MIPS_LOCSTR: u32 = 1879048216;
pub const SHT_MIPS_LINE: u32 = 1879048217;
pub const SHT_MIPS_RFDESC: u32 = 1879048218;
pub const SHT_MIPS_DELTASYM: u32 = 1879048219;
pub const SHT_MIPS_DELTAINST: u32 = 1879048220;
pub const SHT_MIPS_DELTACLASS: u32 = 1879048221;
pub const SHT_MIPS_DWARF: u32 = 1879048222;
pub const SHT_MIPS_DELTADECL: u32 = 1879048223;
pub const SHT_MIPS_SYMBOL_LIB: u32 = 1879048224;
pub const SHT_MIPS_EVENTS: u32 = 1879048225;
pub const SHT_MIPS_TRANSLATE: u32 = 1879048226;
pub const SHT_MIPS_PIXIE: u32 = 1879048227;
pub const SHT_MIPS_XLATE: u32 = 1879048228;
pub const SHT_MIPS_XLATE_DEBUG: u32 = 1879048229;
pub const SHT_MIPS_WHIRL: u32 = 1879048230;
pub const SHT_MIPS_EH_REGION: u32 = 1879048231;
pub const SHT_MIPS_XLATE_OLD: u32 = 1879048232;
pub const SHT_MIPS_PDR_EXCEPTION: u32 = 1879048233;
pub const SHF_MIPS_GPREL: u32 = 268435456;
pub const SHF_MIPS_MERGE: u32 = 536870912;
pub const SHF_MIPS_ADDR: u32 = 1073741824;
pub const SHF_MIPS_STRINGS: u32 = 2147483648;
pub const SHF_MIPS_NOSTRIP: u32 = 134217728;
pub const SHF_MIPS_LOCAL: u32 = 67108864;
pub const SHF_MIPS_NAMES: u32 = 33554432;
pub const SHF_MIPS_NODUPE: u32 = 16777216;
pub const STO_MIPS_DEFAULT: u32 = 0;
pub const STO_MIPS_INTERNAL: u32 = 1;
pub const STO_MIPS_HIDDEN: u32 = 2;
pub const STO_MIPS_PROTECTED: u32 = 3;
pub const STO_MIPS_SC_ALIGN_UNUSED: u32 = 255;
pub const STB_MIPS_SPLIT_COMMON: u32 = 13;
pub const ODK_NULL: u32 = 0;
pub const ODK_REGINFO: u32 = 1;
pub const ODK_EXCEPTIONS: u32 = 2;
pub const ODK_PAD: u32 = 3;
pub const ODK_HWPATCH: u32 = 4;
pub const ODK_FILL: u32 = 5;
pub const ODK_TAGS: u32 = 6;
pub const ODK_HWAND: u32 = 7;
pub const ODK_HWOR: u32 = 8;
pub const OEX_FPU_MIN: u32 = 31;
pub const OEX_FPU_MAX: u32 = 7936;
pub const OEX_PAGE0: u32 = 65536;
pub const OEX_SMM: u32 = 131072;
pub const OEX_FPDBUG: u32 = 262144;
pub const OEX_PRECISEFP: u32 = 262144;
pub const OEX_DISMISS: u32 = 524288;
pub const OEX_FPU_INVAL: u32 = 16;
pub const OEX_FPU_DIV0: u32 = 8;
pub const OEX_FPU_OFLO: u32 = 4;
pub const OEX_FPU_UFLO: u32 = 2;
pub const OEX_FPU_INEX: u32 = 1;
pub const OHW_R4KEOP: u32 = 1;
pub const OHW_R8KPFETCH: u32 = 2;
pub const OHW_R5KEOP: u32 = 4;
pub const OHW_R5KCVTL: u32 = 8;
pub const OPAD_PREFIX: u32 = 1;
pub const OPAD_POSTFIX: u32 = 2;
pub const OPAD_SYMBOL: u32 = 4;
pub const OHWA0_R4KEOP_CHECKED: u32 = 1;
pub const OHWA1_R4KEOP_CLEAN: u32 = 2;
pub const R_MIPS_NONE: u32 = 0;
pub const R_MIPS_16: u32 = 1;
pub const R_MIPS_32: u32 = 2;
pub const R_MIPS_REL32: u32 = 3;
pub const R_MIPS_26: u32 = 4;
pub const R_MIPS_HI16: u32 = 5;
pub const R_MIPS_LO16: u32 = 6;
pub const R_MIPS_GPREL16: u32 = 7;
pub const R_MIPS_LITERAL: u32 = 8;
pub const R_MIPS_GOT16: u32 = 9;
pub const R_MIPS_PC16: u32 = 10;
pub const R_MIPS_CALL16: u32 = 11;
pub const R_MIPS_GPREL32: u32 = 12;
pub const R_MIPS_SHIFT5: u32 = 16;
pub const R_MIPS_SHIFT6: u32 = 17;
pub const R_MIPS_64: u32 = 18;
pub const R_MIPS_GOT_DISP: u32 = 19;
pub const R_MIPS_GOT_PAGE: u32 = 20;
pub const R_MIPS_GOT_OFST: u32 = 21;
pub const R_MIPS_GOT_HI16: u32 = 22;
pub const R_MIPS_GOT_LO16: u32 = 23;
pub const R_MIPS_SUB: u32 = 24;
pub const R_MIPS_INSERT_A: u32 = 25;
pub const R_MIPS_INSERT_B: u32 = 26;
pub const R_MIPS_DELETE: u32 = 27;
pub const R_MIPS_HIGHER: u32 = 28;
pub const R_MIPS_HIGHEST: u32 = 29;
pub const R_MIPS_CALL_HI16: u32 = 30;
pub const R_MIPS_CALL_LO16: u32 = 31;
pub const R_MIPS_SCN_DISP: u32 = 32;
pub const R_MIPS_REL16: u32 = 33;
pub const R_MIPS_ADD_IMMEDIATE: u32 = 34;
pub const R_MIPS_PJUMP: u32 = 35;
pub const R_MIPS_RELGOT: u32 = 36;
pub const R_MIPS_JALR: u32 = 37;
pub const R_MIPS_NUM: u32 = 38;
pub const PT_MIPS_REGINFO: u32 = 1879048192;
pub const PT_MIPS_RTPROC: u32 = 1879048193;
pub const PT_MIPS_OPTIONS: u32 = 1879048194;
pub const PF_MIPS_LOCAL: u32 = 268435456;
pub const DT_MIPS_RLD_VERSION: u32 = 1879048193;
pub const DT_MIPS_TIME_STAMP: u32 = 1879048194;
pub const DT_MIPS_ICHECKSUM: u32 = 1879048195;
pub const DT_MIPS_IVERSION: u32 = 1879048196;
pub const DT_MIPS_FLAGS: u32 = 1879048197;
pub const DT_MIPS_BASE_ADDRESS: u32 = 1879048198;
pub const DT_MIPS_MSYM: u32 = 1879048199;
pub const DT_MIPS_CONFLICT: u32 = 1879048200;
pub const DT_MIPS_LIBLIST: u32 = 1879048201;
pub const DT_MIPS_LOCAL_GOTNO: u32 = 1879048202;
pub const DT_MIPS_CONFLICTNO: u32 = 1879048203;
pub const DT_MIPS_LIBLISTNO: u32 = 1879048208;
pub const DT_MIPS_SYMTABNO: u32 = 1879048209;
pub const DT_MIPS_UNREFEXTNO: u32 = 1879048210;
pub const DT_MIPS_GOTSYM: u32 = 1879048211;
pub const DT_MIPS_HIPAGENO: u32 = 1879048212;
pub const DT_MIPS_RLD_MAP: u32 = 1879048214;
pub const DT_MIPS_DELTA_CLASS: u32 = 1879048215;
pub const DT_MIPS_DELTA_CLASS_NO: u32 = 1879048216;
pub const DT_MIPS_DELTA_INSTANCE: u32 = 1879048217;
pub const DT_MIPS_DELTA_INSTANCE_NO: u32 = 1879048218;
pub const DT_MIPS_DELTA_RELOC: u32 = 1879048219;
pub const DT_MIPS_DELTA_RELOC_NO: u32 = 1879048220;
pub const DT_MIPS_DELTA_SYM: u32 = 1879048221;
pub const DT_MIPS_DELTA_SYM_NO: u32 = 1879048222;
pub const DT_MIPS_DELTA_CLASSSYM: u32 = 1879048224;
pub const DT_MIPS_DELTA_CLASSSYM_NO: u32 = 1879048225;
pub const DT_MIPS_CXX_FLAGS: u32 = 1879048226;
pub const DT_MIPS_PIXIE_INIT: u32 = 1879048227;
pub const DT_MIPS_SYMBOL_LIB: u32 = 1879048228;
pub const DT_MIPS_LOCALPAGE_GOTIDX: u32 = 1879048229;
pub const DT_MIPS_LOCAL_GOTIDX: u32 = 1879048230;
pub const DT_MIPS_HIDDEN_GOTIDX: u32 = 1879048231;
pub const DT_MIPS_PROTECTED_GOTIDX: u32 = 1879048232;
pub const DT_MIPS_OPTIONS: u32 = 1879048233;
pub const DT_MIPS_INTERFACE: u32 = 1879048234;
pub const DT_MIPS_DYNSTR_ALIGN: u32 = 1879048235;
pub const DT_MIPS_INTERFACE_SIZE: u32 = 1879048236;
pub const DT_MIPS_RLD_TEXT_RESOLVE_ADDR: u32 = 1879048237;
pub const DT_MIPS_PERF_SUFFIX: u32 = 1879048238;
pub const DT_MIPS_COMPACT_SIZE: u32 = 1879048239;
pub const DT_MIPS_GP_VALUE: u32 = 1879048240;
pub const DT_MIPS_AUX_DYNAMIC: u32 = 1879048241;
pub const DT_MIPS_NUM: u32 = 50;
pub const RHF_NONE: u32 = 0;
pub const RHF_QUICKSTART: u32 = 1;
pub const RHF_NOTPOT: u32 = 2;
pub const RHF_NO_LIBRARY_REPLACEMENT: u32 = 4;
pub const RHF_NO_MOVE: u32 = 8;
pub const RHF_SGI_ONLY: u32 = 16;
pub const RHF_GUARANTEE_INIT: u32 = 32;
pub const RHF_DELTA_C_PLUS_PLUS: u32 = 64;
pub const RHF_GUARANTEE_START_INIT: u32 = 128;
pub const RHF_PIXIE: u32 = 256;
pub const RHF_DEFAULT_DELAY_LOAD: u32 = 512;
pub const RHF_REQUICKSTART: u32 = 1024;
pub const RHF_REQUICKSTARTED: u32 = 2048;
pub const RHF_CORD: u32 = 4096;
pub const RHF_NO_UNRES_UNDEF: u32 = 8192;
pub const RHF_RLD_ORDER_SAFE: u32 = 16384;
pub const LL_NONE: u32 = 0;
pub const LL_EXACT_MATCH: u32 = 1;
pub const LL_IGNORE_INT_VER: u32 = 2;
pub const LL_REQUIRE_MINOR: u32 = 4;
pub const LL_EXPORTS: u32 = 8;
pub const LL_DELAY_LOAD: u32 = 16;
pub const LL_DELTA: u32 = 32;
pub const EF_PARISC_TRAPNIL: u32 = 65536;
pub const EF_PARISC_EXT: u32 = 131072;
pub const EF_PARISC_LSB: u32 = 262144;
pub const EF_PARISC_WIDE: u32 = 524288;
pub const EF_PARISC_NO_KABP: u32 = 1048576;
pub const EF_PARISC_LAZYSWAP: u32 = 4194304;
pub const EF_PARISC_ARCH: u32 = 65535;
pub const EFA_PARISC_1_0: u32 = 523;
pub const EFA_PARISC_1_1: u32 = 528;
pub const EFA_PARISC_2_0: u32 = 532;
pub const SHN_PARISC_ANSI_COMMON: u32 = 65280;
pub const SHN_PARISC_HUGE_COMMON: u32 = 65281;
pub const SHT_PARISC_EXT: u32 = 1879048192;
pub const SHT_PARISC_UNWIND: u32 = 1879048193;
pub const SHT_PARISC_DOC: u32 = 1879048194;
pub const SHF_PARISC_SHORT: u32 = 536870912;
pub const SHF_PARISC_HUGE: u32 = 1073741824;
pub const SHF_PARISC_SBP: u32 = 2147483648;
pub const STT_PARISC_MILLICODE: u32 = 13;
pub const STT_HP_OPAQUE: u32 = 11;
pub const STT_HP_STUB: u32 = 12;
pub const R_PARISC_NONE: u32 = 0;
pub const R_PARISC_DIR32: u32 = 1;
pub const R_PARISC_DIR21L: u32 = 2;
pub const R_PARISC_DIR17R: u32 = 3;
pub const R_PARISC_DIR17F: u32 = 4;
pub const R_PARISC_DIR14R: u32 = 6;
pub const R_PARISC_PCREL32: u32 = 9;
pub const R_PARISC_PCREL21L: u32 = 10;
pub const R_PARISC_PCREL17R: u32 = 11;
pub const R_PARISC_PCREL17F: u32 = 12;
pub const R_PARISC_PCREL14R: u32 = 14;
pub const R_PARISC_DPREL21L: u32 = 18;
pub const R_PARISC_DPREL14R: u32 = 22;
pub const R_PARISC_GPREL21L: u32 = 26;
pub const R_PARISC_GPREL14R: u32 = 30;
pub const R_PARISC_LTOFF21L: u32 = 34;
pub const R_PARISC_LTOFF14R: u32 = 38;
pub const R_PARISC_SECREL32: u32 = 41;
pub const R_PARISC_SEGBASE: u32 = 48;
pub const R_PARISC_SEGREL32: u32 = 49;
pub const R_PARISC_PLTOFF21L: u32 = 50;
pub const R_PARISC_PLTOFF14R: u32 = 54;
pub const R_PARISC_LTOFF_FPTR32: u32 = 57;
pub const R_PARISC_LTOFF_FPTR21L: u32 = 58;
pub const R_PARISC_LTOFF_FPTR14R: u32 = 62;
pub const R_PARISC_FPTR64: u32 = 64;
pub const R_PARISC_PLABEL32: u32 = 65;
pub const R_PARISC_PCREL64: u32 = 72;
pub const R_PARISC_PCREL22F: u32 = 74;
pub const R_PARISC_PCREL14WR: u32 = 75;
pub const R_PARISC_PCREL14DR: u32 = 76;
pub const R_PARISC_PCREL16F: u32 = 77;
pub const R_PARISC_PCREL16WF: u32 = 78;
pub const R_PARISC_PCREL16DF: u32 = 79;
pub const R_PARISC_DIR64: u32 = 80;
pub const R_PARISC_DIR14WR: u32 = 83;
pub const R_PARISC_DIR14DR: u32 = 84;
pub const R_PARISC_DIR16F: u32 = 85;
pub const R_PARISC_DIR16WF: u32 = 86;
pub const R_PARISC_DIR16DF: u32 = 87;
pub const R_PARISC_GPREL64: u32 = 88;
pub const R_PARISC_GPREL14WR: u32 = 91;
pub const R_PARISC_GPREL14DR: u32 = 92;
pub const R_PARISC_GPREL16F: u32 = 93;
pub const R_PARISC_GPREL16WF: u32 = 94;
pub const R_PARISC_GPREL16DF: u32 = 95;
pub const R_PARISC_LTOFF64: u32 = 96;
pub const R_PARISC_LTOFF14WR: u32 = 99;
pub const R_PARISC_LTOFF14DR: u32 = 100;
pub const R_PARISC_LTOFF16F: u32 = 101;
pub const R_PARISC_LTOFF16WF: u32 = 102;
pub const R_PARISC_LTOFF16DF: u32 = 103;
pub const R_PARISC_SECREL64: u32 = 104;
pub const R_PARISC_SEGREL64: u32 = 112;
pub const R_PARISC_PLTOFF14WR: u32 = 115;
pub const R_PARISC_PLTOFF14DR: u32 = 116;
pub const R_PARISC_PLTOFF16F: u32 = 117;
pub const R_PARISC_PLTOFF16WF: u32 = 118;
pub const R_PARISC_PLTOFF16DF: u32 = 119;
pub const R_PARISC_LTOFF_FPTR64: u32 = 120;
pub const R_PARISC_LTOFF_FPTR14WR: u32 = 123;
pub const R_PARISC_LTOFF_FPTR14DR: u32 = 124;
pub const R_PARISC_LTOFF_FPTR16F: u32 = 125;
pub const R_PARISC_LTOFF_FPTR16WF: u32 = 126;
pub const R_PARISC_LTOFF_FPTR16DF: u32 = 127;
pub const R_PARISC_LORESERVE: u32 = 128;
pub const R_PARISC_COPY: u32 = 128;
pub const R_PARISC_IPLT: u32 = 129;
pub const R_PARISC_EPLT: u32 = 130;
pub const R_PARISC_TPREL32: u32 = 153;
pub const R_PARISC_TPREL21L: u32 = 154;
pub const R_PARISC_TPREL14R: u32 = 158;
pub const R_PARISC_LTOFF_TP21L: u32 = 162;
pub const R_PARISC_LTOFF_TP14R: u32 = 166;
pub const R_PARISC_LTOFF_TP14F: u32 = 167;
pub const R_PARISC_TPREL64: u32 = 216;
pub const R_PARISC_TPREL14WR: u32 = 219;
pub const R_PARISC_TPREL14DR: u32 = 220;
pub const R_PARISC_TPREL16F: u32 = 221;
pub const R_PARISC_TPREL16WF: u32 = 222;
pub const R_PARISC_TPREL16DF: u32 = 223;
pub const R_PARISC_LTOFF_TP64: u32 = 224;
pub const R_PARISC_LTOFF_TP14WR: u32 = 227;
pub const R_PARISC_LTOFF_TP14DR: u32 = 228;
pub const R_PARISC_LTOFF_TP16F: u32 = 229;
pub const R_PARISC_LTOFF_TP16WF: u32 = 230;
pub const R_PARISC_LTOFF_TP16DF: u32 = 231;
pub const R_PARISC_HIRESERVE: u32 = 255;
pub const PT_HP_TLS: u32 = 1610612736;
pub const PT_HP_CORE_NONE: u32 = 1610612737;
pub const PT_HP_CORE_VERSION: u32 = 1610612738;
pub const PT_HP_CORE_KERNEL: u32 = 1610612739;
pub const PT_HP_CORE_COMM: u32 = 1610612740;
pub const PT_HP_CORE_PROC: u32 = 1610612741;
pub const PT_HP_CORE_LOADABLE: u32 = 1610612742;
pub const PT_HP_CORE_STACK: u32 = 1610612743;
pub const PT_HP_CORE_SHM: u32 = 1610612744;
pub const PT_HP_CORE_MMF: u32 = 1610612745;
pub const PT_HP_PARALLEL: u32 = 1610612752;
pub const PT_HP_FASTBIND: u32 = 1610612753;
pub const PT_HP_OPT_ANNOT: u32 = 1610612754;
pub const PT_HP_HSL_ANNOT: u32 = 1610612755;
pub const PT_HP_STACK: u32 = 1610612756;
pub const PT_PARISC_ARCHEXT: u32 = 1879048192;
pub const PT_PARISC_UNWIND: u32 = 1879048193;
pub const PF_PARISC_SBP: u32 = 134217728;
pub const PF_HP_PAGE_SIZE: u32 = 1048576;
pub const PF_HP_FAR_SHARED: u32 = 2097152;
pub const PF_HP_NEAR_SHARED: u32 = 4194304;
pub const PF_HP_CODE: u32 = 16777216;
pub const PF_HP_MODIFY: u32 = 33554432;
pub const PF_HP_LAZYSWAP: u32 = 67108864;
pub const PF_HP_SBP: u32 = 134217728;
pub const EF_ALPHA_32BIT: u32 = 1;
pub const EF_ALPHA_CANRELAX: u32 = 2;
pub const SHT_ALPHA_DEBUG: u32 = 1879048193;
pub const SHT_ALPHA_REGINFO: u32 = 1879048194;
pub const SHF_ALPHA_GPREL: u32 = 268435456;
pub const STO_ALPHA_NOPV: u32 = 128;
pub const STO_ALPHA_STD_GPLOAD: u32 = 136;
pub const R_ALPHA_NONE: u32 = 0;
pub const R_ALPHA_REFLONG: u32 = 1;
pub const R_ALPHA_REFQUAD: u32 = 2;
pub const R_ALPHA_GPREL32: u32 = 3;
pub const R_ALPHA_LITERAL: u32 = 4;
pub const R_ALPHA_LITUSE: u32 = 5;
pub const R_ALPHA_GPDISP: u32 = 6;
pub const R_ALPHA_BRADDR: u32 = 7;
pub const R_ALPHA_HINT: u32 = 8;
pub const R_ALPHA_SREL16: u32 = 9;
pub const R_ALPHA_SREL32: u32 = 10;
pub const R_ALPHA_SREL64: u32 = 11;
pub const R_ALPHA_GPRELHIGH: u32 = 17;
pub const R_ALPHA_GPRELLOW: u32 = 18;
pub const R_ALPHA_GPREL16: u32 = 19;
pub const R_ALPHA_COPY: u32 = 24;
pub const R_ALPHA_GLOB_DAT: u32 = 25;
pub const R_ALPHA_JMP_SLOT: u32 = 26;
pub const R_ALPHA_RELATIVE: u32 = 27;
pub const R_ALPHA_TLS_GD_HI: u32 = 28;
pub const R_ALPHA_TLSGD: u32 = 29;
pub const R_ALPHA_TLS_LDM: u32 = 30;
pub const R_ALPHA_DTPMOD64: u32 = 31;
pub const R_ALPHA_GOTDTPREL: u32 = 32;
pub const R_ALPHA_DTPREL64: u32 = 33;
pub const R_ALPHA_DTPRELHI: u32 = 34;
pub const R_ALPHA_DTPRELLO: u32 = 35;
pub const R_ALPHA_DTPREL16: u32 = 36;
pub const R_ALPHA_GOTTPREL: u32 = 37;
pub const R_ALPHA_TPREL64: u32 = 38;
pub const R_ALPHA_TPRELHI: u32 = 39;
pub const R_ALPHA_TPRELLO: u32 = 40;
pub const R_ALPHA_TPREL16: u32 = 41;
pub const R_ALPHA_NUM: u32 = 46;
pub const LITUSE_ALPHA_ADDR: u32 = 0;
pub const LITUSE_ALPHA_BASE: u32 = 1;
pub const LITUSE_ALPHA_BYTOFF: u32 = 2;
pub const LITUSE_ALPHA_JSR: u32 = 3;
pub const LITUSE_ALPHA_TLS_GD: u32 = 4;
pub const LITUSE_ALPHA_TLS_LDM: u32 = 5;
pub const EF_PPC_EMB: u32 = 2147483648;
pub const EF_PPC_RELOCATABLE: u32 = 65536;
pub const EF_PPC_RELOCATABLE_LIB: u32 = 32768;
pub const GRUB_ELF_R_PPC_NONE: u32 = 0;
pub const GRUB_ELF_R_PPC_ADDR32: u32 = 1;
pub const GRUB_ELF_R_PPC_ADDR24: u32 = 2;
pub const GRUB_ELF_R_PPC_ADDR16: u32 = 3;
pub const GRUB_ELF_R_PPC_ADDR16_LO: u32 = 4;
pub const GRUB_ELF_R_PPC_ADDR16_HI: u32 = 5;
pub const GRUB_ELF_R_PPC_ADDR16_HA: u32 = 6;
pub const GRUB_ELF_R_PPC_ADDR14: u32 = 7;
pub const GRUB_ELF_R_PPC_ADDR14_BRTAKEN: u32 = 8;
pub const GRUB_ELF_R_PPC_ADDR14_BRNTAKEN: u32 = 9;
pub const GRUB_ELF_R_PPC_REL24: u32 = 10;
pub const GRUB_ELF_R_PPC_REL14: u32 = 11;
pub const GRUB_ELF_R_PPC_REL14_BRTAKEN: u32 = 12;
pub const GRUB_ELF_R_PPC_REL14_BRNTAKEN: u32 = 13;
pub const GRUB_ELF_R_PPC_GOT16: u32 = 14;
pub const GRUB_ELF_R_PPC_GOT16_LO: u32 = 15;
pub const GRUB_ELF_R_PPC_GOT16_HI: u32 = 16;
pub const GRUB_ELF_R_PPC_GOT16_HA: u32 = 17;
pub const GRUB_ELF_R_PPC_PLTREL24: u32 = 18;
pub const GRUB_ELF_R_PPC_COPY: u32 = 19;
pub const GRUB_ELF_R_PPC_GLOB_DAT: u32 = 20;
pub const GRUB_ELF_R_PPC_JMP_SLOT: u32 = 21;
pub const GRUB_ELF_R_PPC_RELATIVE: u32 = 22;
pub const GRUB_ELF_R_PPC_LOCAL24PC: u32 = 23;
pub const GRUB_ELF_R_PPC_UADDR32: u32 = 24;
pub const GRUB_ELF_R_PPC_UADDR16: u32 = 25;
pub const GRUB_ELF_R_PPC_REL32: u32 = 26;
pub const GRUB_ELF_R_PPC_PLT32: u32 = 27;
pub const GRUB_ELF_R_PPC_PLTREL32: u32 = 28;
pub const GRUB_ELF_R_PPC_PLT16_LO: u32 = 29;
pub const GRUB_ELF_R_PPC_PLT16_HI: u32 = 30;
pub const GRUB_ELF_R_PPC_PLT16_HA: u32 = 31;
pub const GRUB_ELF_R_PPC_SDAREL16: u32 = 32;
pub const GRUB_ELF_R_PPC_SECTOFF: u32 = 33;
pub const GRUB_ELF_R_PPC_SECTOFF_LO: u32 = 34;
pub const GRUB_ELF_R_PPC_SECTOFF_HI: u32 = 35;
pub const GRUB_ELF_R_PPC_SECTOFF_HA: u32 = 36;
pub const GRUB_ELF_R_PPC_NUM: u32 = 37;
pub const GRUB_ELF_R_PPC64_NONE: u32 = 0;
pub const GRUB_ELF_R_PPC64_ADDR32: u32 = 1;
pub const GRUB_ELF_R_PPC64_ADDR24: u32 = 2;
pub const GRUB_ELF_R_PPC64_ADDR16: u32 = 3;
pub const GRUB_ELF_R_PPC64_ADDR16_LO: u32 = 4;
pub const GRUB_ELF_R_PPC64_ADDR16_HI: u32 = 5;
pub const GRUB_ELF_R_PPC64_ADDR16_HA: u32 = 6;
pub const GRUB_ELF_R_PPC64_ADDR14: u32 = 7;
pub const GRUB_ELF_R_PPC64_ADDR14_BRTAKEN: u32 = 8;
pub const GRUB_ELF_R_PPC64_ADDR14_BRNTAKEN: u32 = 9;
pub const GRUB_ELF_R_PPC64_REL24: u32 = 10;
pub const GRUB_ELF_R_PPC64_REL14: u32 = 11;
pub const GRUB_ELF_R_PPC64_REL14_BRTAKEN: u32 = 12;
pub const GRUB_ELF_R_PPC64_REL14_BRNTAKEN: u32 = 13;
pub const GRUB_ELF_R_PPC64_GOT16: u32 = 14;
pub const GRUB_ELF_R_PPC64_GOT16_LO: u32 = 15;
pub const GRUB_ELF_R_PPC64_GOT16_HI: u32 = 16;
pub const GRUB_ELF_R_PPC64_GOT16_HA: u32 = 17;
pub const GRUB_ELF_R_PPC64_COPY: u32 = 19;
pub const GRUB_ELF_R_PPC64_GLOB_DAT: u32 = 20;
pub const GRUB_ELF_R_PPC64_JMP_SLOT: u32 = 21;
pub const GRUB_ELF_R_PPC64_RELATIVE: u32 = 22;
pub const GRUB_ELF_R_PPC64_UADDR32: u32 = 24;
pub const GRUB_ELF_R_PPC64_UADDR16: u32 = 25;
pub const GRUB_ELF_R_PPC64_REL32: u32 = 26;
pub const GRUB_ELF_R_PPC64_PLT32: u32 = 27;
pub const GRUB_ELF_R_PPC64_PLTREL32: u32 = 28;
pub const GRUB_ELF_R_PPC64_PLT16_LO: u32 = 29;
pub const GRUB_ELF_R_PPC64_PLT16_HI: u32 = 30;
pub const GRUB_ELF_R_PPC64_PLT16_HA: u32 = 31;
pub const GRUB_ELF_R_PPC64_SECTOFF: u32 = 33;
pub const GRUB_ELF_R_PPC64_SECTOFF_LO: u32 = 34;
pub const GRUB_ELF_R_PPC64_SECTOFF_HI: u32 = 35;
pub const GRUB_ELF_R_PPC64_SECTOFF_HA: u32 = 36;
pub const GRUB_ELF_R_PPC64_ADDR30: u32 = 37;
pub const GRUB_ELF_R_PPC64_ADDR64: u32 = 38;
pub const GRUB_ELF_R_PPC64_ADDR16_HIGHER: u32 = 39;
pub const GRUB_ELF_R_PPC64_ADDR16_HIGHERA: u32 = 40;
pub const GRUB_ELF_R_PPC64_ADDR16_HIGHEST: u32 = 41;
pub const GRUB_ELF_R_PPC64_ADDR16_HIGHESTA: u32 = 42;
pub const GRUB_ELF_R_PPC64_UADDR64: u32 = 43;
pub const GRUB_ELF_R_PPC64_REL64: u32 = 44;
pub const GRUB_ELF_R_PPC64_PLT64: u32 = 45;
pub const GRUB_ELF_R_PPC64_PLTREL64: u32 = 46;
pub const GRUB_ELF_R_PPC64_TOC16: u32 = 47;
pub const GRUB_ELF_R_PPC64_TOC16_LO: u32 = 48;
pub const GRUB_ELF_R_PPC64_TOC16_HI: u32 = 49;
pub const GRUB_ELF_R_PPC64_TOC16_HA: u32 = 50;
pub const GRUB_ELF_R_PPC64_TOC: u32 = 51;
pub const GRUB_ELF_R_PPC64_PLTGOT16: u32 = 52;
pub const GRUB_ELF_R_PPC64_PLTGOT16_LO: u32 = 53;
pub const GRUB_ELF_R_PPC64_PLTGOT16_HI: u32 = 54;
pub const GRUB_ELF_R_PPC64_PLTGOT16_HA: u32 = 55;
pub const GRUB_ELF_R_PPC64_ADDR16_DS: u32 = 56;
pub const GRUB_ELF_R_PPC64_ADDR16_LO_DS: u32 = 57;
pub const GRUB_ELF_R_PPC64_GOT16_DS: u32 = 58;
pub const GRUB_ELF_R_PPC64_GOT16_LO_DS: u32 = 59;
pub const GRUB_ELF_R_PPC64_PLT16_LO_DS: u32 = 60;
pub const GRUB_ELF_R_PPC64_SECTOFF_DS: u32 = 61;
pub const GRUB_ELF_R_PPC64_SECTOFF_LO_DS: u32 = 62;
pub const GRUB_ELF_R_PPC64_TOC16_DS: u32 = 63;
pub const GRUB_ELF_R_PPC64_TOC16_LO_DS: u32 = 64;
pub const GRUB_ELF_R_PPC64_PLTGOT16_DS: u32 = 65;
pub const GRUB_ELF_R_PPC64_PLTGOT16_LO_DS: u32 = 66;
pub const GRUB_ELF_R_PPC64_NUM: u32 = 67;
pub const GRUB_ELF_R_PPC_EMB_NADDR32: u32 = 101;
pub const GRUB_ELF_R_PPC_EMB_NADDR16: u32 = 102;
pub const GRUB_ELF_R_PPC_EMB_NADDR16_LO: u32 = 103;
pub const GRUB_ELF_R_PPC_EMB_NADDR16_HI: u32 = 104;
pub const GRUB_ELF_R_PPC_EMB_NADDR16_HA: u32 = 105;
pub const GRUB_ELF_R_PPC_EMB_SDAI16: u32 = 106;
pub const GRUB_ELF_R_PPC_EMB_SDA2I16: u32 = 107;
pub const GRUB_ELF_R_PPC_EMB_SDA2REL: u32 = 108;
pub const GRUB_ELF_R_PPC_EMB_SDA21: u32 = 109;
pub const GRUB_ELF_R_PPC_EMB_MRKREF: u32 = 110;
pub const GRUB_ELF_R_PPC_EMB_RELSEC16: u32 = 111;
pub const GRUB_ELF_R_PPC_EMB_RELST_LO: u32 = 112;
pub const GRUB_ELF_R_PPC_EMB_RELST_HI: u32 = 113;
pub const GRUB_ELF_R_PPC_EMB_RELST_HA: u32 = 114;
pub const GRUB_ELF_R_PPC_EMB_BIT_FLD: u32 = 115;
pub const GRUB_ELF_R_PPC_EMB_RELSDA: u32 = 116;
pub const GRUB_ELF_R_PPC_DIAB_SDA21_LO: u32 = 180;
pub const GRUB_ELF_R_PPC_DIAB_SDA21_HI: u32 = 181;
pub const GRUB_ELF_R_PPC_DIAB_SDA21_HA: u32 = 182;
pub const GRUB_ELF_R_PPC_DIAB_RELSDA_LO: u32 = 183;
pub const GRUB_ELF_R_PPC_DIAB_RELSDA_HI: u32 = 184;
pub const GRUB_ELF_R_PPC_DIAB_RELSDA_HA: u32 = 185;
pub const GRUB_ELF_R_PPC_TOC16: u32 = 255;
pub const DT_PPC64_GLINK: u32 = 1879048192;
pub const DT_PPC64_NUM: u32 = 1;
pub const EF_ARM_RELEXEC: u32 = 1;
pub const EF_ARM_HASENTRY: u32 = 2;
pub const EF_ARM_INTERWORK: u32 = 4;
pub const EF_ARM_APCS_26: u32 = 8;
pub const EF_ARM_APCS_FLOAT: u32 = 16;
pub const EF_ARM_PIC: u32 = 32;
pub const EF_ARM_ALIGN8: u32 = 64;
pub const EF_ARM_NEW_ABI: u32 = 128;
pub const EF_ARM_OLD_ABI: u32 = 256;
pub const EF_ARM_SOFT_FLOAT: u32 = 512;
pub const EF_ARM_VFP_FLOAT: u32 = 1024;
pub const EF_ARM_MAVERICK_FLOAT: u32 = 2048;
pub const EF_ARM_SYMSARESORTED: u32 = 4;
pub const EF_ARM_DYNSYMSUSESEGIDX: u32 = 8;
pub const EF_ARM_MAPSYMSFIRST: u32 = 16;
pub const EF_ARM_EABIMASK: u32 = 4278190080;
pub const EF_ARM_BE8: u32 = 8388608;
pub const EF_ARM_LE8: u32 = 4194304;
pub const EF_ARM_EABI_UNKNOWN: u32 = 0;
pub const EF_ARM_EABI_VER1: u32 = 16777216;
pub const EF_ARM_EABI_VER2: u32 = 33554432;
pub const EF_ARM_EABI_VER3: u32 = 50331648;
pub const EF_ARM_EABI_VER4: u32 = 67108864;
pub const EF_ARM_EABI_VER5: u32 = 83886080;
pub const STT_ARM_TFUNC: u32 = 13;
pub const STT_ARM_16BIT: u32 = 15;
pub const SHF_ARM_ENTRYSECT: u32 = 268435456;
pub const SHF_ARM_COMDEF: u32 = 2147483648;
pub const PF_ARM_SB: u32 = 268435456;
pub const PF_ARM_PI: u32 = 536870912;
pub const PF_ARM_ABS: u32 = 1073741824;
pub const PT_ARM_EXIDX: u32 = 1879048193;
pub const SHT_ARM_EXIDX: u32 = 1879048193;
pub const SHT_ARM_PREEMPTMAP: u32 = 1879048194;
pub const SHT_ARM_ATTRIBUTES: u32 = 1879048195;
pub const R_AARCH64_NONE: u32 = 0;
pub const R_AARCH64_ABS64: u32 = 257;
pub const R_AARCH64_ABS32: u32 = 258;
pub const R_AARCH64_PREL32: u32 = 261;
pub const R_AARCH64_ADR_PREL_PG_HI21: u32 = 275;
pub const R_AARCH64_ADD_ABS_LO12_NC: u32 = 277;
pub const R_AARCH64_LDST64_ABS_LO12_NC: u32 = 286;
pub const R_AARCH64_JUMP26: u32 = 282;
pub const R_AARCH64_CALL26: u32 = 283;
pub const R_AARCH64_ADR_GOT_PAGE: u32 = 311;
pub const R_AARCH64_LD64_GOT_LO12_NC: u32 = 312;
pub const R_AARCH64_COPY: u32 = 1024;
pub const R_AARCH64_GLOB_DAT: u32 = 1025;
pub const R_AARCH64_JUMP_SLOT: u32 = 1026;
pub const R_AARCH64_RELATIVE: u32 = 1027;
pub const R_AARCH64_TLS_DTPMOD64: u32 = 1028;
pub const R_AARCH64_TLS_DTPREL64: u32 = 1029;
pub const R_AARCH64_TLS_TPREL64: u32 = 1030;
pub const R_AARCH64_TLSDESC: u32 = 1031;
pub const R_ARM_NONE: u32 = 0;
pub const R_ARM_PC24: u32 = 1;
pub const R_ARM_ABS32: u32 = 2;
pub const R_ARM_REL32: u32 = 3;
pub const R_ARM_LDR_PC_G0: u32 = 4;
pub const R_ARM_ABS16: u32 = 5;
pub const R_ARM_ABS12: u32 = 6;
pub const R_ARM_THM_ABS5: u32 = 7;
pub const R_ARM_ABS8: u32 = 8;
pub const R_ARM_SBREL32: u32 = 9;
pub const R_ARM_THM_CALL: u32 = 10;
pub const R_ARM_THM_PC8: u32 = 11;
pub const R_ARM_BREL_ADJ: u32 = 12;
pub const R_ARM_TLS_DESC: u32 = 13;
pub const R_ARM_THM_SWI8: u32 = 14;
pub const R_ARM_XPC25: u32 = 15;
pub const R_ARM_THM_XPC22: u32 = 16;
pub const R_ARM_TLS_DTPMOD32: u32 = 17;
pub const R_ARM_TLS_DTPOFF32: u32 = 18;
pub const R_ARM_TLS_TPOFF32: u32 = 19;
pub const R_ARM_COPY: u32 = 20;
pub const R_ARM_GLOB_DAT: u32 = 21;
pub const R_ARM_JUMP_SLOT: u32 = 22;
pub const R_ARM_RELATIVE: u32 = 23;
pub const R_ARM_GOTOFF32: u32 = 24;
pub const R_ARM_BASE_PREL: u32 = 25;
pub const R_ARM_GOT_BREL: u32 = 26;
pub const R_ARM_PLT32: u32 = 27;
pub const R_ARM_CALL: u32 = 28;
pub const R_ARM_JUMP24: u32 = 29;
pub const R_ARM_THM_JUMP24: u32 = 30;
pub const R_ARM_BASE_ABS: u32 = 31;
pub const R_ARM_ALU_PCREL_7_0: u32 = 32;
pub const R_ARM_ALU_PCREL_15_8: u32 = 33;
pub const R_ARM_ALU_PCREL_23_15: u32 = 34;
pub const R_ARM_LDR_SBREL_11_0: u32 = 35;
pub const R_ARM_ALU_SBREL_19_12: u32 = 36;
pub const R_ARM_ALU_SBREL_27_20: u32 = 37;
pub const R_ARM_TARGET1: u32 = 38;
pub const R_ARM_SBREL31: u32 = 39;
pub const R_ARM_V4BX: u32 = 40;
pub const R_ARM_TARGET2: u32 = 41;
pub const R_ARM_PREL31: u32 = 42;
pub const R_ARM_MOVW_ABS_NC: u32 = 43;
pub const R_ARM_MOVT_ABS: u32 = 44;
pub const R_ARM_MOVW_PREL_NC: u32 = 45;
pub const R_ARM_MOVT_PREL: u32 = 46;
pub const R_ARM_THM_MOVW_ABS_NC: u32 = 47;
pub const R_ARM_THM_MOVT_ABS: u32 = 48;
pub const R_ARM_THM_MOVW_PREL_NC: u32 = 49;
pub const R_ARM_THM_MOVT_PREL: u32 = 50;
pub const R_ARM_THM_JUMP19: u32 = 51;
pub const R_ARM_THM_JUMP6: u32 = 52;
pub const R_ARM_THM_ALU_PREL_11_0: u32 = 53;
pub const R_ARM_THM_PC12: u32 = 54;
pub const R_ARM_ABS32_NOI: u32 = 55;
pub const R_ARM_REL32_NOI: u32 = 56;
pub const R_ARM_ALU_PC_G0_NC: u32 = 57;
pub const R_ARM_ALU_PC_G0: u32 = 58;
pub const R_ARM_ALU_PC_G1_NC: u32 = 59;
pub const R_ARM_ALU_PC_G1: u32 = 60;
pub const R_ARM_ALU_PC_G2: u32 = 61;
pub const R_ARM_LDR_PC_G1: u32 = 62;
pub const R_ARM_LDR_PC_G2: u32 = 63;
pub const R_ARM_LDRS_PC_G0: u32 = 64;
pub const R_ARM_LDRS_PC_G1: u32 = 65;
pub const R_ARM_LDRS_PC_G2: u32 = 66;
pub const R_ARM_LDC_PC_G0: u32 = 67;
pub const R_ARM_LDC_PC_G1: u32 = 68;
pub const R_ARM_LDC_PC_G2: u32 = 69;
pub const R_ARM_ALU_SB_G0_NC: u32 = 70;
pub const R_ARM_ALU_SB_G0: u32 = 71;
pub const R_ARM_ALU_SB_G1_NC: u32 = 72;
pub const R_ARM_ALU_SB_G1: u32 = 73;
pub const R_ARM_ALU_SB_G2: u32 = 74;
pub const R_ARM_LDR_SB_G0: u32 = 75;
pub const R_ARM_LDR_SB_G1: u32 = 76;
pub const R_ARM_LDR_SB_G2: u32 = 77;
pub const R_ARM_LDRS_SB_G0: u32 = 78;
pub const R_ARM_LDRS_SB_G1: u32 = 79;
pub const R_ARM_LDRS_SB_G2: u32 = 80;
pub const R_ARM_LDC_SB_G0: u32 = 81;
pub const R_ARM_LDC_SB_G1: u32 = 82;
pub const R_ARM_LDC_SB_G2: u32 = 83;
pub const R_ARM_MOVW_BREL_NC: u32 = 84;
pub const R_ARM_MOVT_BREL: u32 = 85;
pub const R_ARM_MOVW_BREL: u32 = 86;
pub const R_ARM_THM_MOVW_BREL_NC: u32 = 87;
pub const R_ARM_THM_MOVT_BREL: u32 = 88;
pub const R_ARM_THM_MOVW_BREL: u32 = 89;
pub const R_ARM_TLS_GOTDESC: u32 = 90;
pub const R_ARM_TLS_CALL: u32 = 91;
pub const R_ARM_TLS_DESCSEQ: u32 = 92;
pub const R_ARM_THM_TLS_CALL: u32 = 93;
pub const R_ARM_PLT32_ABS: u32 = 94;
pub const R_ARM_GOT_ABS: u32 = 95;
pub const R_ARM_GOT_PREL: u32 = 96;
pub const R_ARM_GOT_BREL12: u32 = 97;
pub const R_ARM_GOTOFF12: u32 = 98;
pub const R_ARM_GOTRELAX: u32 = 99;
pub const R_ARM_GNU_VTENTRY: u32 = 100;
pub const R_ARM_GNU_VTINHERIT: u32 = 101;
pub const R_ARM_THM_JUMP11: u32 = 102;
pub const R_ARM_THM_JUMP8: u32 = 103;
pub const R_ARM_TLS_GD32: u32 = 104;
pub const R_ARM_TLS_LDM32: u32 = 105;
pub const R_ARM_TLS_LDO32: u32 = 106;
pub const R_ARM_TLS_IE32: u32 = 107;
pub const R_ARM_TLS_LE32: u32 = 108;
pub const R_ARM_TLS_LDO12: u32 = 109;
pub const R_ARM_TLS_LE12: u32 = 110;
pub const R_ARM_IE12GP: u32 = 111;
pub const R_ARM_PRIVATE_0: u32 = 112;
pub const R_ARM_PRIVATE_1: u32 = 113;
pub const R_ARM_PRIVATE_2: u32 = 114;
pub const R_ARM_PRIVATE_3: u32 = 115;
pub const R_ARM_PRIVATE_4: u32 = 116;
pub const R_ARM_PRIVATE_5: u32 = 117;
pub const R_ARM_PRIVATE_6: u32 = 118;
pub const R_ARM_PRIVATE_7: u32 = 119;
pub const R_ARM_PRIVATE_8: u32 = 120;
pub const R_ARM_PRIVATE_9: u32 = 121;
pub const R_ARM_PRIVATE_10: u32 = 122;
pub const R_ARM_PRIVATE_11: u32 = 123;
pub const R_ARM_PRIVATE_12: u32 = 124;
pub const R_ARM_PRIVATE_13: u32 = 125;
pub const R_ARM_PRIVATE_14: u32 = 126;
pub const R_ARM_PRIVATE_15: u32 = 127;
pub const R_ARM_ME_TOO: u32 = 128;
pub const R_ARM_THM_TLS_DESCSEQ16: u32 = 129;
pub const R_ARM_THM_TLS_DESCSEQ32: u32 = 130;
pub const R_ARM_THM_GOT_BREL12: u32 = 131;
pub const R_ARM_IRELATIVE: u32 = 140;
pub const R_ARM_NUM: u32 = 256;
pub const EF_IA_64_MASKOS: u32 = 15;
pub const EF_IA_64_ABI64: u32 = 16;
pub const EF_IA_64_ARCH: u32 = 4278190080;
pub const PT_IA_64_ARCHEXT: u32 = 1879048192;
pub const PT_IA_64_UNWIND: u32 = 1879048193;
pub const PF_IA_64_NORECOV: u32 = 2147483648;
pub const SHT_IA_64_EXT: u32 = 1879048192;
pub const SHT_IA_64_UNWIND: u32 = 1879048193;
pub const SHF_IA_64_SHORT: u32 = 268435456;
pub const SHF_IA_64_NORECOV: u32 = 536870912;
pub const DT_IA_64_PLT_RESERVE: u32 = 1879048192;
pub const DT_IA_64_NUM: u32 = 1;
pub const R_IA64_NONE: u32 = 0;
pub const R_IA64_IMM14: u32 = 33;
pub const R_IA64_IMM22: u32 = 34;
pub const R_IA64_IMM64: u32 = 35;
pub const R_IA64_DIR32MSB: u32 = 36;
pub const R_IA64_DIR32LSB: u32 = 37;
pub const R_IA64_DIR64MSB: u32 = 38;
pub const R_IA64_DIR64LSB: u32 = 39;
pub const R_IA64_GPREL22: u32 = 42;
pub const R_IA64_GPREL64I: u32 = 43;
pub const R_IA64_GPREL32MSB: u32 = 44;
pub const R_IA64_GPREL32LSB: u32 = 45;
pub const R_IA64_GPREL64MSB: u32 = 46;
pub const R_IA64_GPREL64LSB: u32 = 47;
pub const R_IA64_LTOFF22: u32 = 50;
pub const R_IA64_LTOFF64I: u32 = 51;
pub const R_IA64_PLTOFF22: u32 = 58;
pub const R_IA64_PLTOFF64I: u32 = 59;
pub const R_IA64_PLTOFF64MSB: u32 = 62;
pub const R_IA64_PLTOFF64LSB: u32 = 63;
pub const R_IA64_FPTR64I: u32 = 67;
pub const R_IA64_FPTR32MSB: u32 = 68;
pub const R_IA64_FPTR32LSB: u32 = 69;
pub const R_IA64_FPTR64MSB: u32 = 70;
pub const R_IA64_FPTR64LSB: u32 = 71;
pub const R_IA64_PCREL60B: u32 = 72;
pub const R_IA64_PCREL21B: u32 = 73;
pub const R_IA64_PCREL21M: u32 = 74;
pub const R_IA64_PCREL21F: u32 = 75;
pub const R_IA64_PCREL32MSB: u32 = 76;
pub const R_IA64_PCREL32LSB: u32 = 77;
pub const R_IA64_PCREL64MSB: u32 = 78;
pub const R_IA64_PCREL64LSB: u32 = 79;
pub const R_IA64_LTOFF_FPTR22: u32 = 82;
pub const R_IA64_LTOFF_FPTR64I: u32 = 83;
pub const R_IA64_LTOFF_FPTR32MSB: u32 = 84;
pub const R_IA64_LTOFF_FPTR32LSB: u32 = 85;
pub const R_IA64_LTOFF_FPTR64MSB: u32 = 86;
pub const R_IA64_LTOFF_FPTR64LSB: u32 = 87;
pub const R_IA64_SEGREL32MSB: u32 = 92;
pub const R_IA64_SEGREL32LSB: u32 = 93;
pub const R_IA64_SEGREL64MSB: u32 = 94;
pub const R_IA64_SEGREL64LSB: u32 = 95;
pub const R_IA64_SECREL32MSB: u32 = 100;
pub const R_IA64_SECREL32LSB: u32 = 101;
pub const R_IA64_SECREL64MSB: u32 = 102;
pub const R_IA64_SECREL64LSB: u32 = 103;
pub const R_IA64_REL32MSB: u32 = 108;
pub const R_IA64_REL32LSB: u32 = 109;
pub const R_IA64_REL64MSB: u32 = 110;
pub const R_IA64_REL64LSB: u32 = 111;
pub const R_IA64_LTV32MSB: u32 = 116;
pub const R_IA64_LTV32LSB: u32 = 117;
pub const R_IA64_LTV64MSB: u32 = 118;
pub const R_IA64_LTV64LSB: u32 = 119;
pub const R_IA64_PCREL21BI: u32 = 121;
pub const R_IA64_PCREL22: u32 = 122;
pub const R_IA64_PCREL64I: u32 = 123;
pub const R_IA64_IPLTMSB: u32 = 128;
pub const R_IA64_IPLTLSB: u32 = 129;
pub const R_IA64_COPY: u32 = 132;
pub const R_IA64_SUB: u32 = 133;
pub const R_IA64_LTOFF22X: u32 = 134;
pub const R_IA64_LDXMOV: u32 = 135;
pub const R_IA64_TPREL14: u32 = 145;
pub const R_IA64_TPREL22: u32 = 146;
pub const R_IA64_TPREL64I: u32 = 147;
pub const R_IA64_TPREL64MSB: u32 = 150;
pub const R_IA64_TPREL64LSB: u32 = 151;
pub const R_IA64_LTOFF_TPREL22: u32 = 154;
pub const R_IA64_DTPMOD64MSB: u32 = 166;
pub const R_IA64_DTPMOD64LSB: u32 = 167;
pub const R_IA64_LTOFF_DTPMOD22: u32 = 170;
pub const R_IA64_DTPREL14: u32 = 177;
pub const R_IA64_DTPREL22: u32 = 178;
pub const R_IA64_DTPREL64I: u32 = 179;
pub const R_IA64_DTPREL32MSB: u32 = 180;
pub const R_IA64_DTPREL32LSB: u32 = 181;
pub const R_IA64_DTPREL64MSB: u32 = 182;
pub const R_IA64_DTPREL64LSB: u32 = 183;
pub const R_IA64_LTOFF_DTPREL22: u32 = 186;
pub const R_SH_NONE: u32 = 0;
pub const R_SH_DIR32: u32 = 1;
pub const R_SH_REL32: u32 = 2;
pub const R_SH_DIR8WPN: u32 = 3;
pub const R_SH_IND12W: u32 = 4;
pub const R_SH_DIR8WPL: u32 = 5;
pub const R_SH_DIR8WPZ: u32 = 6;
pub const R_SH_DIR8BP: u32 = 7;
pub const R_SH_DIR8W: u32 = 8;
pub const R_SH_DIR8L: u32 = 9;
pub const R_SH_SWITCH16: u32 = 25;
pub const R_SH_SWITCH32: u32 = 26;
pub const R_SH_USES: u32 = 27;
pub const R_SH_COUNT: u32 = 28;
pub const R_SH_ALIGN: u32 = 29;
pub const R_SH_CODE: u32 = 30;
pub const R_SH_DATA: u32 = 31;
pub const R_SH_LABEL: u32 = 32;
pub const R_SH_SWITCH8: u32 = 33;
pub const R_SH_GNU_VTINHERIT: u32 = 34;
pub const R_SH_GNU_VTENTRY: u32 = 35;
pub const R_SH_TLS_GD_32: u32 = 144;
pub const R_SH_TLS_LD_32: u32 = 145;
pub const R_SH_TLS_LDO_32: u32 = 146;
pub const R_SH_TLS_IE_32: u32 = 147;
pub const R_SH_TLS_LE_32: u32 = 148;
pub const R_SH_TLS_DTPMOD32: u32 = 149;
pub const R_SH_TLS_DTPOFF32: u32 = 150;
pub const R_SH_TLS_TPOFF32: u32 = 151;
pub const R_SH_TLS_GD_MOV: u32 = 152;
pub const R_SH_TLS_LDM_MOV: u32 = 153;
pub const R_SH_TLS_LDO_MOV: u32 = 154;
pub const R_SH_TLS_IE_MOV: u32 = 155;
pub const R_SH_TLS_LE_MOV: u32 = 156;
pub const R_SH_GOT32: u32 = 160;
pub const R_SH_PLT32: u32 = 161;
pub const R_SH_COPY: u32 = 162;
pub const R_SH_GLOB_DAT: u32 = 163;
pub const R_SH_JMP_SLOT: u32 = 164;
pub const R_SH_RELATIVE: u32 = 165;
pub const R_SH_GOTOFF: u32 = 166;
pub const R_SH_GOTPC: u32 = 167;
pub const R_SH_NUM: u32 = 256;
pub const R_390_NONE: u32 = 0;
pub const R_390_8: u32 = 1;
pub const R_390_12: u32 = 2;
pub const R_390_16: u32 = 3;
pub const R_390_32: u32 = 4;
pub const R_390_PC32: u32 = 5;
pub const R_390_GOT12: u32 = 6;
pub const R_390_GOT32: u32 = 7;
pub const R_390_PLT32: u32 = 8;
pub const R_390_COPY: u32 = 9;
pub const R_390_GLOB_DAT: u32 = 10;
pub const R_390_JMP_SLOT: u32 = 11;
pub const R_390_RELATIVE: u32 = 12;
pub const R_390_GOTOFF: u32 = 13;
pub const R_390_GOTPC: u32 = 14;
pub const R_390_GOT16: u32 = 15;
pub const R_390_PC16: u32 = 16;
pub const R_390_PC16DBL: u32 = 17;
pub const R_390_PLT16DBL: u32 = 18;
pub const R_390_PC32DBL: u32 = 19;
pub const R_390_PLT32DBL: u32 = 20;
pub const R_390_GOTPCDBL: u32 = 21;
pub const R_390_64: u32 = 22;
pub const R_390_PC64: u32 = 23;
pub const R_390_GOT64: u32 = 24;
pub const R_390_PLT64: u32 = 25;
pub const R_390_GOTENT: u32 = 26;
pub const R_390_NUM: u32 = 27;
pub const R_CRIS_NONE: u32 = 0;
pub const R_CRIS_8: u32 = 1;
pub const R_CRIS_16: u32 = 2;
pub const R_CRIS_32: u32 = 3;
pub const R_CRIS_8_PCREL: u32 = 4;
pub const R_CRIS_16_PCREL: u32 = 5;
pub const R_CRIS_32_PCREL: u32 = 6;
pub const R_CRIS_GNU_VTINHERIT: u32 = 7;
pub const R_CRIS_GNU_VTENTRY: u32 = 8;
pub const R_CRIS_COPY: u32 = 9;
pub const R_CRIS_GLOB_DAT: u32 = 10;
pub const R_CRIS_JUMP_SLOT: u32 = 11;
pub const R_CRIS_RELATIVE: u32 = 12;
pub const R_CRIS_16_GOT: u32 = 13;
pub const R_CRIS_32_GOT: u32 = 14;
pub const R_CRIS_16_GOTPLT: u32 = 15;
pub const R_CRIS_32_GOTPLT: u32 = 16;
pub const R_CRIS_32_GOTREL: u32 = 17;
pub const R_CRIS_32_PLT_GOTREL: u32 = 18;
pub const R_CRIS_32_PLT_PCREL: u32 = 19;
pub const R_CRIS_NUM: u32 = 20;
pub const R_X86_64_DTPMOD64: u32 = 16;
pub const R_X86_64_DTPOFF64: u32 = 17;
pub const R_X86_64_TPOFF64: u32 = 18;
pub const R_X86_64_TLSGD: u32 = 19;
pub const R_X86_64_TLSLD: u32 = 20;
pub const R_X86_64_DTPOFF32: u32 = 21;
pub const r_x86_64_GOTTPOFF: u32 = 22;
pub const R_X86_64_TPOFF32: u32 = 23;
pub const R_X86_64_NUM: u32 = 24;
pub const R_RISCV_NONE: u32 = 0;
pub const R_RISCV_32: u32 = 1;
pub const R_RISCV_64: u32 = 2;
pub const R_RISCV_RELATIVE: u32 = 3;
pub const R_RISCV_COPY: u32 = 4;
pub const R_RISCV_JUMP_SLOT: u32 = 5;
pub const R_RISCV_TLS_DTPMOD32: u32 = 6;
pub const R_RISCV_TLS_DTPMOD64: u32 = 7;
pub const R_RISCV_TLS_DTPREL32: u32 = 8;
pub const R_RISCV_TLS_DTPREL64: u32 = 9;
pub const R_RISCV_TLS_TPREL32: u32 = 10;
pub const R_RISCV_TLS_TPREL64: u32 = 11;
pub const R_RISCV_BRANCH: u32 = 16;
pub const R_RISCV_JAL: u32 = 17;
pub const R_RISCV_CALL: u32 = 18;
pub const R_RISCV_CALL_PLT: u32 = 19;
pub const R_RISCV_GOT_HI20: u32 = 20;
pub const R_RISCV_TLS_GOT_HI20: u32 = 21;
pub const R_RISCV_TLS_GD_HI20: u32 = 22;
pub const R_RISCV_PCREL_HI20: u32 = 23;
pub const R_RISCV_PCREL_LO12_I: u32 = 24;
pub const R_RISCV_PCREL_LO12_S: u32 = 25;
pub const R_RISCV_HI20: u32 = 26;
pub const R_RISCV_LO12_I: u32 = 27;
pub const R_RISCV_LO12_S: u32 = 28;
pub const R_RISCV_TPREL_HI20: u32 = 29;
pub const R_RISCV_TPREL_LO12_I: u32 = 30;
pub const R_RISCV_TPREL_LO12_S: u32 = 31;
pub const R_RISCV_TPREL_ADD: u32 = 32;
pub const R_RISCV_ADD8: u32 = 33;
pub const R_RISCV_ADD16: u32 = 34;
pub const R_RISCV_ADD32: u32 = 35;
pub const R_RISCV_ADD64: u32 = 36;
pub const R_RISCV_SUB8: u32 = 37;
pub const R_RISCV_SUB16: u32 = 38;
pub const R_RISCV_SUB32: u32 = 39;
pub const R_RISCV_SUB64: u32 = 40;
pub const R_RISCV_GNU_VTINHERIT: u32 = 41;
pub const R_RISCV_GNU_VTENTRY: u32 = 42;
pub const R_RISCV_ALIGN: u32 = 43;
pub const R_RISCV_RVC_BRANCH: u32 = 44;
pub const R_RISCV_RVC_JUMP: u32 = 45;
pub const R_RISCV_LUI: u32 = 46;
pub const R_RISCV_GPREL_I: u32 = 47;
pub const R_RISCV_GPREL_S: u32 = 48;
pub const R_RISCV_TPREL_I: u32 = 49;
pub const R_RISCV_TPREL_S: u32 = 50;
pub const R_RISCV_RELAX: u32 = 51;
pub const R_RISCV_SUB6: u32 = 52;
pub const R_RISCV_SET6: u32 = 53;
pub const R_RISCV_SET8: u32 = 54;
pub const R_RISCV_SET16: u32 = 55;
pub const R_RISCV_SET32: u32 = 56;
pub const R_RISCV_32_PCREL: u32 = 57;
pub const GRUB_IA64_DL_TRAMP_ALIGN: u32 = 16;
pub const GRUB_IA64_DL_GOT_ALIGN: u32 = 16;
pub type grub_int8_t = cty::c_schar;
pub type grub_int16_t = cty::c_short;
pub type grub_int32_t = cty::c_int;
pub type grub_int64_t = cty::c_long;
pub type grub_uint8_t = cty::c_uchar;
pub type grub_uint16_t = cty::c_ushort;
pub type grub_uint32_t = cty::c_uint;
pub type grub_uint64_t = cty::c_ulong;
pub type grub_addr_t = grub_uint64_t;
pub type grub_size_t = grub_uint64_t;
pub type grub_ssize_t = grub_int64_t;
pub type grub_properly_aligned_t = grub_uint64_t;
pub type grub_off_t = grub_uint64_t;
pub type grub_disk_addr_t = grub_uint64_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct grub_unaligned_uint16 {
    pub val: grub_uint16_t,
}
#[test]
fn bindgen_test_layout_grub_unaligned_uint16() {
    assert_eq!(
        ::core::mem::size_of::<grub_unaligned_uint16>(),
        2usize,
        concat!("Size of: ", stringify!(grub_unaligned_uint16))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unaligned_uint16>(),
        1usize,
        concat!("Alignment of ", stringify!(grub_unaligned_uint16))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unaligned_uint16>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unaligned_uint16),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct grub_unaligned_uint32 {
    pub val: grub_uint32_t,
}
#[test]
fn bindgen_test_layout_grub_unaligned_uint32() {
    assert_eq!(
        ::core::mem::size_of::<grub_unaligned_uint32>(),
        4usize,
        concat!("Size of: ", stringify!(grub_unaligned_uint32))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unaligned_uint32>(),
        1usize,
        concat!("Alignment of ", stringify!(grub_unaligned_uint32))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unaligned_uint32>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unaligned_uint32),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct grub_unaligned_uint64 {
    pub val: grub_uint64_t,
}
#[test]
fn bindgen_test_layout_grub_unaligned_uint64() {
    assert_eq!(
        ::core::mem::size_of::<grub_unaligned_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(grub_unaligned_uint64))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unaligned_uint64>(),
        1usize,
        concat!("Alignment of ", stringify!(grub_unaligned_uint64))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unaligned_uint64>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unaligned_uint64),
            "::",
            stringify!(val)
        )
    );
}
pub type grub_unaligned_uint16_t = grub_unaligned_uint16;
pub type grub_unaligned_uint32_t = grub_unaligned_uint32;
pub type grub_unaligned_uint64_t = grub_unaligned_uint64;
extern "C" {
    pub fn grub_mm_init_region(addr: *mut cty::c_void, size: grub_size_t);
}
extern "C" {
    pub fn grub_calloc(nmemb: grub_size_t, size: grub_size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_malloc(size: grub_size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_zalloc(size: grub_size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_free(ptr: *mut cty::c_void);
}
extern "C" {
    pub fn grub_realloc(ptr: *mut cty::c_void, size: grub_size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_memalign(align: grub_size_t, size: grub_size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_mm_check_real(file: *const cty::c_char, line: cty::c_int);
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub const grub_err_t_GRUB_ERR_NONE: grub_err_t = 0;
pub const grub_err_t_GRUB_ERR_TEST_FAILURE: grub_err_t = 1;
pub const grub_err_t_GRUB_ERR_BAD_MODULE: grub_err_t = 2;
pub const grub_err_t_GRUB_ERR_OUT_OF_MEMORY: grub_err_t = 3;
pub const grub_err_t_GRUB_ERR_BAD_FILE_TYPE: grub_err_t = 4;
pub const grub_err_t_GRUB_ERR_FILE_NOT_FOUND: grub_err_t = 5;
pub const grub_err_t_GRUB_ERR_FILE_READ_ERROR: grub_err_t = 6;
pub const grub_err_t_GRUB_ERR_BAD_FILENAME: grub_err_t = 7;
pub const grub_err_t_GRUB_ERR_UNKNOWN_FS: grub_err_t = 8;
pub const grub_err_t_GRUB_ERR_BAD_FS: grub_err_t = 9;
pub const grub_err_t_GRUB_ERR_BAD_NUMBER: grub_err_t = 10;
pub const grub_err_t_GRUB_ERR_OUT_OF_RANGE: grub_err_t = 11;
pub const grub_err_t_GRUB_ERR_UNKNOWN_DEVICE: grub_err_t = 12;
pub const grub_err_t_GRUB_ERR_BAD_DEVICE: grub_err_t = 13;
pub const grub_err_t_GRUB_ERR_READ_ERROR: grub_err_t = 14;
pub const grub_err_t_GRUB_ERR_WRITE_ERROR: grub_err_t = 15;
pub const grub_err_t_GRUB_ERR_UNKNOWN_COMMAND: grub_err_t = 16;
pub const grub_err_t_GRUB_ERR_INVALID_COMMAND: grub_err_t = 17;
pub const grub_err_t_GRUB_ERR_BAD_ARGUMENT: grub_err_t = 18;
pub const grub_err_t_GRUB_ERR_BAD_PART_TABLE: grub_err_t = 19;
pub const grub_err_t_GRUB_ERR_UNKNOWN_OS: grub_err_t = 20;
pub const grub_err_t_GRUB_ERR_BAD_OS: grub_err_t = 21;
pub const grub_err_t_GRUB_ERR_NO_KERNEL: grub_err_t = 22;
pub const grub_err_t_GRUB_ERR_BAD_FONT: grub_err_t = 23;
pub const grub_err_t_GRUB_ERR_NOT_IMPLEMENTED_YET: grub_err_t = 24;
pub const grub_err_t_GRUB_ERR_SYMLINK_LOOP: grub_err_t = 25;
pub const grub_err_t_GRUB_ERR_BAD_COMPRESSED_DATA: grub_err_t = 26;
pub const grub_err_t_GRUB_ERR_MENU: grub_err_t = 27;
pub const grub_err_t_GRUB_ERR_TIMEOUT: grub_err_t = 28;
pub const grub_err_t_GRUB_ERR_IO: grub_err_t = 29;
pub const grub_err_t_GRUB_ERR_ACCESS_DENIED: grub_err_t = 30;
pub const grub_err_t_GRUB_ERR_EXTRACTOR: grub_err_t = 31;
pub const grub_err_t_GRUB_ERR_NET_BAD_ADDRESS: grub_err_t = 32;
pub const grub_err_t_GRUB_ERR_NET_ROUTE_LOOP: grub_err_t = 33;
pub const grub_err_t_GRUB_ERR_NET_NO_ROUTE: grub_err_t = 34;
pub const grub_err_t_GRUB_ERR_NET_NO_ANSWER: grub_err_t = 35;
pub const grub_err_t_GRUB_ERR_NET_NO_CARD: grub_err_t = 36;
pub const grub_err_t_GRUB_ERR_WAIT: grub_err_t = 37;
pub const grub_err_t_GRUB_ERR_BUG: grub_err_t = 38;
pub const grub_err_t_GRUB_ERR_NET_PORT_CLOSED: grub_err_t = 39;
pub const grub_err_t_GRUB_ERR_NET_INVALID_RESPONSE: grub_err_t = 40;
pub const grub_err_t_GRUB_ERR_NET_UNKNOWN_ERROR: grub_err_t = 41;
pub const grub_err_t_GRUB_ERR_NET_PACKET_TOO_BIG: grub_err_t = 42;
pub const grub_err_t_GRUB_ERR_NET_NO_DOMAIN: grub_err_t = 43;
pub const grub_err_t_GRUB_ERR_EOF: grub_err_t = 44;
pub const grub_err_t_GRUB_ERR_BAD_SIGNATURE: grub_err_t = 45;
pub type grub_err_t = cty::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct grub_error_saved {
    pub grub_errno: grub_err_t,
    pub errmsg: [cty::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_grub_error_saved() {
    assert_eq!(
        ::core::mem::size_of::<grub_error_saved>(),
        260usize,
        concat!("Size of: ", stringify!(grub_error_saved))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_error_saved>(),
        4usize,
        concat!("Alignment of ", stringify!(grub_error_saved))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_error_saved>())).grub_errno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_error_saved),
            "::",
            stringify!(grub_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_error_saved>())).errmsg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_error_saved),
            "::",
            stringify!(errmsg)
        )
    );
}
extern "C" {
    pub static mut grub_errno: grub_err_t;
}
extern "C" {
    pub static mut grub_errmsg: [cty::c_char; 256usize];
}
extern "C" {
    pub fn grub_error(n: grub_err_t, fmt: *const cty::c_char, ...) -> grub_err_t;
}
extern "C" {
    pub fn grub_fatal(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn grub_error_push();
}
extern "C" {
    pub fn grub_error_pop() -> cty::c_int;
}
extern "C" {
    pub fn grub_print_error();
}
extern "C" {
    pub static mut grub_err_printed_errors: cty::c_int;
}
extern "C" {
    pub fn grub_err_printf(fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub static mut grub_gettext:
        ::core::option::Option<unsafe extern "C" fn(s: *const cty::c_char) -> *const cty::c_char>;
}
extern "C" {
    pub fn grub_memmove(
        dest: *mut cty::c_void,
        src: *const cty::c_void,
        n: grub_size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_strcpy(dest: *mut cty::c_char, src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_memcmp(
        s1: *const cty::c_void,
        s2: *const cty::c_void,
        n: grub_size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn grub_strcmp(s1: *const cty::c_char, s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn grub_strncmp(
        s1: *const cty::c_char,
        s2: *const cty::c_char,
        n: grub_size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn grub_strchr(s: *const cty::c_char, c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_strrchr(s: *const cty::c_char, c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_strword(s: *const cty::c_char, w: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn grub_isspace(c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn grub_strtoul(
        str_: *const cty::c_char,
        end: *mut *const cty::c_char,
        base: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn grub_strtoull(
        str_: *const cty::c_char,
        end: *mut *const cty::c_char,
        base: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn grub_strdup(s: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_strndup(s: *const cty::c_char, n: grub_size_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_memset(s: *mut cty::c_void, c: cty::c_int, n: grub_size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn grub_strlen(s: *const cty::c_char) -> grub_size_t;
}
extern "C" {
    pub fn grub_printf(fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn grub_printf_(fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub static mut grub_xputs:
        ::core::option::Option<unsafe extern "C" fn(str_: *const cty::c_char)>;
}
extern "C" {
    pub fn grub_puts_(s: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn grub_debug_enabled(condition: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn grub_real_dprintf(
        file: *const cty::c_char,
        line: cty::c_int,
        condition: *const cty::c_char,
        fmt: *const cty::c_char,
        ...
    );
}
extern "C" {
    pub fn grub_vprintf(fmt: *const cty::c_char, args: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    pub fn grub_snprintf(
        str_: *mut cty::c_char,
        n: grub_size_t,
        fmt: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn grub_vsnprintf(
        str_: *mut cty::c_char,
        n: grub_size_t,
        fmt: *const cty::c_char,
        args: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn grub_xasprintf(fmt: *const cty::c_char, ...) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_xvasprintf(fmt: *const cty::c_char, args: *mut __va_list_tag) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_exit();
}
extern "C" {
    pub fn grub_divmod64(
        n: grub_uint64_t,
        d: grub_uint64_t,
        r: *mut grub_uint64_t,
    ) -> grub_uint64_t;
}
extern "C" {
    pub fn grub_divmod64s(n: grub_int64_t, d: grub_int64_t, r: *mut grub_int64_t) -> grub_int64_t;
}
extern "C" {
    pub fn grub_divmod32(
        n: grub_uint32_t,
        d: grub_uint32_t,
        r: *mut grub_uint32_t,
    ) -> grub_uint32_t;
}
extern "C" {
    pub fn grub_divmod32s(n: grub_int32_t, d: grub_int32_t, r: *mut grub_int32_t) -> grub_int32_t;
}
extern "C" {
    pub fn grub_reboot();
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn grub_halt();
}
extern "C" {
    pub fn grub_printf_fmt_check(
        fmt: *const cty::c_char,
        fmt_expected: *const cty::c_char,
    ) -> grub_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_unicode_bidi_pair {
    pub key: grub_uint32_t,
    pub replace: grub_uint32_t,
}
#[test]
fn bindgen_test_layout_grub_unicode_bidi_pair() {
    assert_eq!(
        ::core::mem::size_of::<grub_unicode_bidi_pair>(),
        8usize,
        concat!("Size of: ", stringify!(grub_unicode_bidi_pair))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unicode_bidi_pair>(),
        4usize,
        concat!("Alignment of ", stringify!(grub_unicode_bidi_pair))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unicode_bidi_pair>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_bidi_pair),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unicode_bidi_pair>())).replace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_bidi_pair),
            "::",
            stringify!(replace)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct grub_unicode_compact_range {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize], u8>,
}
#[test]
fn bindgen_test_layout_grub_unicode_compact_range() {
    assert_eq!(
        ::core::mem::size_of::<grub_unicode_compact_range>(),
        6usize,
        concat!("Size of: ", stringify!(grub_unicode_compact_range))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unicode_compact_range>(),
        1usize,
        concat!("Alignment of ", stringify!(grub_unicode_compact_range))
    );
}
impl grub_unicode_compact_range {
    #[inline]
    pub fn start(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_start(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn len(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_len(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn bidi_type(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_bidi_type(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn comb_type(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_comb_type(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn bidi_mirror(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bidi_mirror(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn join_type(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(44usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_join_type(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(44usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        start: cty::c_uint,
        len: cty::c_uint,
        bidi_type: cty::c_uint,
        comb_type: cty::c_uint,
        bidi_mirror: cty::c_uint,
        join_type: cty::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 6usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 21u8, {
            let start: u32 = unsafe { ::core::mem::transmute(start) };
            start as u64
        });
        __bindgen_bitfield_unit.set(21usize, 9u8, {
            let len: u32 = unsafe { ::core::mem::transmute(len) };
            len as u64
        });
        __bindgen_bitfield_unit.set(30usize, 5u8, {
            let bidi_type: u32 = unsafe { ::core::mem::transmute(bidi_type) };
            bidi_type as u64
        });
        __bindgen_bitfield_unit.set(35usize, 8u8, {
            let comb_type: u32 = unsafe { ::core::mem::transmute(comb_type) };
            comb_type as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let bidi_mirror: u32 = unsafe { ::core::mem::transmute(bidi_mirror) };
            bidi_mirror as u64
        });
        __bindgen_bitfield_unit.set(44usize, 3u8, {
            let join_type: u32 = unsafe { ::core::mem::transmute(join_type) };
            join_type as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_unicode_arabic_shape {
    pub code: grub_uint32_t,
    pub isolated: grub_uint32_t,
    pub right_linked: grub_uint32_t,
    pub both_linked: grub_uint32_t,
    pub left_linked: grub_uint32_t,
}
#[test]
fn bindgen_test_layout_grub_unicode_arabic_shape() {
    assert_eq!(
        ::core::mem::size_of::<grub_unicode_arabic_shape>(),
        20usize,
        concat!("Size of: ", stringify!(grub_unicode_arabic_shape))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unicode_arabic_shape>(),
        4usize,
        concat!("Alignment of ", stringify!(grub_unicode_arabic_shape))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unicode_arabic_shape>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_arabic_shape),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_unicode_arabic_shape>())).isolated as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_arabic_shape),
            "::",
            stringify!(isolated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_unicode_arabic_shape>())).right_linked as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_arabic_shape),
            "::",
            stringify!(right_linked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_unicode_arabic_shape>())).both_linked as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_arabic_shape),
            "::",
            stringify!(both_linked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_unicode_arabic_shape>())).left_linked as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_arabic_shape),
            "::",
            stringify!(left_linked)
        )
    );
}
extern "C" {
    pub static mut grub_unicode_arabic_shapes: [grub_unicode_arabic_shape; 0usize];
}
pub const grub_bidi_type_GRUB_BIDI_TYPE_L: grub_bidi_type = 0;
pub const grub_bidi_type_GRUB_BIDI_TYPE_LRE: grub_bidi_type = 1;
pub const grub_bidi_type_GRUB_BIDI_TYPE_LRO: grub_bidi_type = 2;
pub const grub_bidi_type_GRUB_BIDI_TYPE_R: grub_bidi_type = 3;
pub const grub_bidi_type_GRUB_BIDI_TYPE_AL: grub_bidi_type = 4;
pub const grub_bidi_type_GRUB_BIDI_TYPE_RLE: grub_bidi_type = 5;
pub const grub_bidi_type_GRUB_BIDI_TYPE_RLO: grub_bidi_type = 6;
pub const grub_bidi_type_GRUB_BIDI_TYPE_PDF: grub_bidi_type = 7;
pub const grub_bidi_type_GRUB_BIDI_TYPE_EN: grub_bidi_type = 8;
pub const grub_bidi_type_GRUB_BIDI_TYPE_ES: grub_bidi_type = 9;
pub const grub_bidi_type_GRUB_BIDI_TYPE_ET: grub_bidi_type = 10;
pub const grub_bidi_type_GRUB_BIDI_TYPE_AN: grub_bidi_type = 11;
pub const grub_bidi_type_GRUB_BIDI_TYPE_CS: grub_bidi_type = 12;
pub const grub_bidi_type_GRUB_BIDI_TYPE_NSM: grub_bidi_type = 13;
pub const grub_bidi_type_GRUB_BIDI_TYPE_BN: grub_bidi_type = 14;
pub const grub_bidi_type_GRUB_BIDI_TYPE_B: grub_bidi_type = 15;
pub const grub_bidi_type_GRUB_BIDI_TYPE_S: grub_bidi_type = 16;
pub const grub_bidi_type_GRUB_BIDI_TYPE_WS: grub_bidi_type = 17;
pub const grub_bidi_type_GRUB_BIDI_TYPE_ON: grub_bidi_type = 18;
pub type grub_bidi_type = cty::c_uint;
pub const grub_join_type_GRUB_JOIN_TYPE_NONJOINING: grub_join_type = 0;
pub const grub_join_type_GRUB_JOIN_TYPE_LEFT: grub_join_type = 1;
pub const grub_join_type_GRUB_JOIN_TYPE_RIGHT: grub_join_type = 2;
pub const grub_join_type_GRUB_JOIN_TYPE_DUAL: grub_join_type = 3;
pub const grub_join_type_GRUB_JOIN_TYPE_CAUSING: grub_join_type = 4;
pub const grub_join_type_GRUB_JOIN_TYPE_TRANSPARENT: grub_join_type = 5;
pub type grub_join_type = cty::c_uint;
pub const grub_comb_type_GRUB_UNICODE_COMB_NONE: grub_comb_type = 0;
pub const grub_comb_type_GRUB_UNICODE_COMB_OVERLAY: grub_comb_type = 1;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_SHEVA: grub_comb_type = 10;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_HATAF_SEGOL: grub_comb_type = 11;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_HATAF_PATAH: grub_comb_type = 12;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_HATAF_QAMATS: grub_comb_type = 13;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_HIRIQ: grub_comb_type = 14;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_TSERE: grub_comb_type = 15;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_SEGOL: grub_comb_type = 16;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_PATAH: grub_comb_type = 17;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_QAMATS: grub_comb_type = 18;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_HOLAM: grub_comb_type = 19;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_QUBUTS: grub_comb_type = 20;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_DAGESH: grub_comb_type = 21;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_METEG: grub_comb_type = 22;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_RAFE: grub_comb_type = 23;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_SHIN_DOT: grub_comb_type = 24;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_SIN_DOT: grub_comb_type = 25;
pub const grub_comb_type_GRUB_UNICODE_COMB_HEBREW_VARIKA: grub_comb_type = 26;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_FATHATAN: grub_comb_type = 27;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_DAMMATAN: grub_comb_type = 28;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_KASRATAN: grub_comb_type = 29;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_FATHAH: grub_comb_type = 30;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_DAMMAH: grub_comb_type = 31;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_KASRA: grub_comb_type = 32;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_SHADDA: grub_comb_type = 33;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_SUKUN: grub_comb_type = 34;
pub const grub_comb_type_GRUB_UNICODE_COMB_ARABIC_SUPERSCRIPT_ALIF: grub_comb_type = 35;
pub const grub_comb_type_GRUB_UNICODE_COMB_SYRIAC_SUPERSCRIPT_ALAPH: grub_comb_type = 36;
pub const grub_comb_type_GRUB_UNICODE_STACK_ATTACHED_BELOW: grub_comb_type = 202;
pub const grub_comb_type_GRUB_UNICODE_STACK_ATTACHED_ABOVE: grub_comb_type = 214;
pub const grub_comb_type_GRUB_UNICODE_COMB_ATTACHED_ABOVE_RIGHT: grub_comb_type = 216;
pub const grub_comb_type_GRUB_UNICODE_STACK_BELOW: grub_comb_type = 220;
pub const grub_comb_type_GRUB_UNICODE_COMB_BELOW_RIGHT: grub_comb_type = 222;
pub const grub_comb_type_GRUB_UNICODE_COMB_ABOVE_LEFT: grub_comb_type = 228;
pub const grub_comb_type_GRUB_UNICODE_STACK_ABOVE: grub_comb_type = 230;
pub const grub_comb_type_GRUB_UNICODE_COMB_ABOVE_RIGHT: grub_comb_type = 232;
pub const grub_comb_type_GRUB_UNICODE_COMB_YPOGEGRAMMENI: grub_comb_type = 240;
pub const grub_comb_type_GRUB_UNICODE_COMB_ME: grub_comb_type = 253;
pub const grub_comb_type_GRUB_UNICODE_COMB_MC: grub_comb_type = 254;
pub const grub_comb_type_GRUB_UNICODE_COMB_MN: grub_comb_type = 255;
pub type grub_comb_type = cty::c_uint;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct grub_unicode_combining {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
}
#[test]
fn bindgen_test_layout_grub_unicode_combining() {
    assert_eq!(
        ::core::mem::size_of::<grub_unicode_combining>(),
        4usize,
        concat!("Size of: ", stringify!(grub_unicode_combining))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unicode_combining>(),
        4usize,
        concat!("Alignment of ", stringify!(grub_unicode_combining))
    );
}
impl grub_unicode_combining {
    #[inline]
    pub fn code(&self) -> grub_uint32_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 21u8) as u32) }
    }
    #[inline]
    pub fn set_code(&mut self, val: grub_uint32_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 21u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> grub_comb_type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: grub_comb_type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        code: grub_uint32_t,
        type_: grub_comb_type,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 21u8, {
            let code: u32 = unsafe { ::core::mem::transmute(code) };
            code as u64
        });
        __bindgen_bitfield_unit.set(21usize, 8u8, {
            let type_: u32 = unsafe { ::core::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct grub_unicode_glyph {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize], u32>,
    pub orig_pos: grub_size_t,
    pub __bindgen_anon_1: grub_unicode_glyph__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union grub_unicode_glyph__bindgen_ty_1 {
    pub combining_inline: [grub_unicode_combining; 2usize],
    pub combining_ptr: *mut grub_unicode_combining,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_grub_unicode_glyph__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<grub_unicode_glyph__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(grub_unicode_glyph__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unicode_glyph__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(grub_unicode_glyph__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_unicode_glyph__bindgen_ty_1>())).combining_inline
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_glyph__bindgen_ty_1),
            "::",
            stringify!(combining_inline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_unicode_glyph__bindgen_ty_1>())).combining_ptr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_glyph__bindgen_ty_1),
            "::",
            stringify!(combining_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_grub_unicode_glyph() {
    assert_eq!(
        ::core::mem::size_of::<grub_unicode_glyph>(),
        32usize,
        concat!("Size of: ", stringify!(grub_unicode_glyph))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_unicode_glyph>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_unicode_glyph))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_unicode_glyph>())).orig_pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_unicode_glyph),
            "::",
            stringify!(orig_pos)
        )
    );
}
impl grub_unicode_glyph {
    #[inline]
    pub fn base(&self) -> grub_uint32_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_base(&mut self, val: grub_uint32_t) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn variant(&self) -> grub_uint16_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_variant(&mut self, val: grub_uint16_t) {
        unsafe {
            let val: u16 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn attributes(&self) -> grub_uint8_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_attributes(&mut self, val: grub_uint8_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn bidi_level(&self) -> grub_uint8_t {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_bidi_level(&mut self, val: grub_uint8_t) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn bidi_type(&self) -> grub_bidi_type {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(46usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_bidi_type(&mut self, val: grub_bidi_type) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(46usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn ncomb(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ncomb(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn estimated_width(&self) -> cty::c_int {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(64usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_estimated_width(&mut self, val: cty::c_int) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(64usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        base: grub_uint32_t,
        variant: grub_uint16_t,
        attributes: grub_uint8_t,
        bidi_level: grub_uint8_t,
        bidi_type: grub_bidi_type,
        ncomb: cty::c_uint,
        estimated_width: cty::c_int,
    ) -> __BindgenBitfieldUnit<[u8; 12usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 23u8, {
            let base: u32 = unsafe { ::core::mem::transmute(base) };
            base as u64
        });
        __bindgen_bitfield_unit.set(23usize, 9u8, {
            let variant: u16 = unsafe { ::core::mem::transmute(variant) };
            variant as u64
        });
        __bindgen_bitfield_unit.set(32usize, 5u8, {
            let attributes: u8 = unsafe { ::core::mem::transmute(attributes) };
            attributes as u64
        });
        __bindgen_bitfield_unit.set(40usize, 6u8, {
            let bidi_level: u8 = unsafe { ::core::mem::transmute(bidi_level) };
            bidi_level as u64
        });
        __bindgen_bitfield_unit.set(46usize, 5u8, {
            let bidi_type: u32 = unsafe { ::core::mem::transmute(bidi_type) };
            bidi_type as u64
        });
        __bindgen_bitfield_unit.set(51usize, 8u8, {
            let ncomb: u32 = unsafe { ::core::mem::transmute(ncomb) };
            ncomb as u64
        });
        __bindgen_bitfield_unit.set(64usize, 8u8, {
            let estimated_width: u32 = unsafe { ::core::mem::transmute(estimated_width) };
            estimated_width as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const GRUB_UNICODE_DOTLESS_LOWERCASE_I: cty::c_uint = 305;
pub const GRUB_UNICODE_DOTLESS_LOWERCASE_J: cty::c_uint = 567;
pub const GRUB_UNICODE_COMBINING_GRAPHEME_JOINER: cty::c_uint = 847;
pub const GRUB_UNICODE_HEBREW_WAW: cty::c_uint = 1493;
pub const GRUB_UNICODE_ARABIC_START: cty::c_uint = 1536;
pub const GRUB_UNICODE_ARABIC_END: cty::c_uint = 1792;
pub const GRUB_UNICODE_THAANA_ABAFILI: cty::c_uint = 1958;
pub const GRUB_UNICODE_THAANA_AABAAFILI: cty::c_uint = 1959;
pub const GRUB_UNICODE_THAANA_IBIFILI: cty::c_uint = 1960;
pub const GRUB_UNICODE_THAANA_EEBEEFILI: cty::c_uint = 1961;
pub const GRUB_UNICODE_THAANA_UBUFILI: cty::c_uint = 1962;
pub const GRUB_UNICODE_THAANA_OOBOOFILI: cty::c_uint = 1963;
pub const GRUB_UNICODE_THAANA_EBEFILI: cty::c_uint = 1964;
pub const GRUB_UNICODE_THAANA_EYBEYFILI: cty::c_uint = 1965;
pub const GRUB_UNICODE_THAANA_OBOFILI: cty::c_uint = 1966;
pub const GRUB_UNICODE_THAANA_OABOAFILI: cty::c_uint = 1967;
pub const GRUB_UNICODE_THAANA_SUKUN: cty::c_uint = 1968;
pub const GRUB_UNICODE_ZWNJ: cty::c_uint = 8204;
pub const GRUB_UNICODE_ZWJ: cty::c_uint = 8205;
pub const GRUB_UNICODE_LRM: cty::c_uint = 8206;
pub const GRUB_UNICODE_RLM: cty::c_uint = 8207;
pub const GRUB_UNICODE_LRE: cty::c_uint = 8234;
pub const GRUB_UNICODE_RLE: cty::c_uint = 8235;
pub const GRUB_UNICODE_PDF: cty::c_uint = 8236;
pub const GRUB_UNICODE_LRO: cty::c_uint = 8237;
pub const GRUB_UNICODE_RLO: cty::c_uint = 8238;
pub const GRUB_UNICODE_LEFTARROW: cty::c_uint = 8592;
pub const GRUB_UNICODE_UPARROW: cty::c_uint = 8593;
pub const GRUB_UNICODE_RIGHTARROW: cty::c_uint = 8594;
pub const GRUB_UNICODE_DOWNARROW: cty::c_uint = 8595;
pub const GRUB_UNICODE_UPDOWNARROW: cty::c_uint = 8597;
pub const GRUB_UNICODE_LIGHT_HLINE: cty::c_uint = 9472;
pub const GRUB_UNICODE_HLINE: cty::c_uint = 9473;
pub const GRUB_UNICODE_LIGHT_VLINE: cty::c_uint = 9474;
pub const GRUB_UNICODE_VLINE: cty::c_uint = 9475;
pub const GRUB_UNICODE_LIGHT_CORNER_UL: cty::c_uint = 9484;
pub const GRUB_UNICODE_CORNER_UL: cty::c_uint = 9487;
pub const GRUB_UNICODE_LIGHT_CORNER_UR: cty::c_uint = 9488;
pub const GRUB_UNICODE_CORNER_UR: cty::c_uint = 9491;
pub const GRUB_UNICODE_LIGHT_CORNER_LL: cty::c_uint = 9492;
pub const GRUB_UNICODE_CORNER_LL: cty::c_uint = 9495;
pub const GRUB_UNICODE_LIGHT_CORNER_LR: cty::c_uint = 9496;
pub const GRUB_UNICODE_CORNER_LR: cty::c_uint = 9499;
pub const GRUB_UNICODE_BLACK_UP_TRIANGLE: cty::c_uint = 9650;
pub const GRUB_UNICODE_BLACK_RIGHT_TRIANGLE: cty::c_uint = 9658;
pub const GRUB_UNICODE_BLACK_DOWN_TRIANGLE: cty::c_uint = 9660;
pub const GRUB_UNICODE_BLACK_LEFT_TRIANGLE: cty::c_uint = 9668;
pub const GRUB_UNICODE_VARIATION_SELECTOR_1: cty::c_uint = 65024;
pub const GRUB_UNICODE_VARIATION_SELECTOR_16: cty::c_uint = 65039;
pub const GRUB_UNICODE_TAG_START: cty::c_uint = 917504;
pub const GRUB_UNICODE_TAG_END: cty::c_uint = 917631;
pub const GRUB_UNICODE_VARIATION_SELECTOR_17: cty::c_uint = 917760;
pub const GRUB_UNICODE_VARIATION_SELECTOR_256: cty::c_uint = 917999;
pub const GRUB_UNICODE_LAST_VALID: cty::c_uint = 1114111;
pub type _bindgen_ty_1 = cty::c_uint;
extern "C" {
    pub static mut grub_unicode_compact: [grub_unicode_compact_range; 0usize];
}
extern "C" {
    pub static mut grub_unicode_bidi_pairs: [grub_unicode_bidi_pair; 0usize];
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct grub_term_pos {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
}
#[test]
fn bindgen_test_layout_grub_term_pos() {
    assert_eq!(
        ::core::mem::size_of::<grub_term_pos>(),
        4usize,
        concat!("Size of: ", stringify!(grub_term_pos))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_term_pos>(),
        4usize,
        concat!("Alignment of ", stringify!(grub_term_pos))
    );
}
impl grub_term_pos {
    #[inline]
    pub fn valid(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valid(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn x(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_x(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn y(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_y(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        valid: cty::c_uint,
        x: cty::c_uint,
        y: cty::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let valid: u32 = unsafe { ::core::mem::transmute(valid) };
            valid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let x: u32 = unsafe { ::core::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let y: u32 = unsafe { ::core::mem::transmute(y) };
            y as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn grub_bidi_logical_to_visual(
        logical: *const grub_uint32_t,
        logical_len: grub_size_t,
        visual_out: *mut *mut grub_unicode_glyph,
        getcharwidth: ::core::option::Option<
            unsafe extern "C" fn(
                visual: *const grub_unicode_glyph,
                getcharwidth_arg: *mut cty::c_void,
            ) -> grub_size_t,
        >,
        getcharwidth_arg: *mut cty::c_void,
        max_width: grub_size_t,
        start_width: grub_size_t,
        codechar: grub_uint32_t,
        pos: *mut grub_term_pos,
        primitive_wrap: cty::c_int,
    ) -> grub_ssize_t;
}
extern "C" {
    pub fn grub_unicode_get_comb_type(c: grub_uint32_t) -> grub_comb_type;
}
extern "C" {
    pub fn grub_unicode_aglomerate_comb(
        in_: *const grub_uint32_t,
        inlen: grub_size_t,
        out: *mut grub_unicode_glyph,
    ) -> grub_size_t;
}
extern "C" {
    pub fn grub_unicode_mirror_code(in_: grub_uint32_t) -> grub_uint32_t;
}
extern "C" {
    pub fn grub_unicode_shape_code(in_: grub_uint32_t, attr: grub_uint8_t) -> grub_uint32_t;
}
extern "C" {
    pub fn grub_unicode_get_comb_end(
        end: *const grub_uint32_t,
        cur: *const grub_uint32_t,
    ) -> *const grub_uint32_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_list {
    pub next: *mut grub_list,
    pub prev: *mut *mut grub_list,
}
#[test]
fn bindgen_test_layout_grub_list() {
    assert_eq!(
        ::core::mem::size_of::<grub_list>(),
        16usize,
        concat!("Size of: ", stringify!(grub_list))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_list>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_list))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_list>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_list),
            "::",
            stringify!(prev)
        )
    );
}
pub type grub_list_t = *mut grub_list;
extern "C" {
    pub fn grub_list_push(head: *mut grub_list_t, item: grub_list_t);
}
extern "C" {
    pub fn grub_list_remove(item: grub_list_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_named_list {
    pub next: *mut grub_named_list,
    pub prev: *mut *mut grub_named_list,
    pub name: *mut cty::c_char,
}
#[test]
fn bindgen_test_layout_grub_named_list() {
    assert_eq!(
        ::core::mem::size_of::<grub_named_list>(),
        24usize,
        concat!("Size of: ", stringify!(grub_named_list))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_named_list>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_named_list))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_named_list>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_named_list),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_named_list>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_named_list),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_named_list>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_named_list),
            "::",
            stringify!(name)
        )
    );
}
pub type grub_named_list_t = *mut grub_named_list;
extern "C" {
    pub fn grub_named_list_find(
        head: grub_named_list_t,
        name: *const cty::c_char,
    ) -> *mut cty::c_void;
}
pub const grub_term_color_state_GRUB_TERM_COLOR_UNDEFINED: grub_term_color_state = -1;
pub const grub_term_color_state_GRUB_TERM_COLOR_STANDARD: grub_term_color_state = 0;
pub const grub_term_color_state_GRUB_TERM_COLOR_NORMAL: grub_term_color_state = 1;
pub const grub_term_color_state_GRUB_TERM_COLOR_HIGHLIGHT: grub_term_color_state = 2;
pub type grub_term_color_state = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_term_input {
    pub next: *mut grub_term_input,
    pub prev: *mut *mut grub_term_input,
    pub name: *const cty::c_char,
    pub init:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_input) -> grub_err_t>,
    pub fini:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_input) -> grub_err_t>,
    pub getkey:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_input) -> cty::c_int>,
    pub getkeystatus:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_input) -> cty::c_int>,
    pub data: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_grub_term_input() {
    assert_eq!(
        ::core::mem::size_of::<grub_term_input>(),
        64usize,
        concat!("Size of: ", stringify!(grub_term_input))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_term_input>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_term_input))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).fini as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).getkey as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(getkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).getkeystatus as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(getkeystatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_input>())).data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_input),
            "::",
            stringify!(data)
        )
    );
}
pub type grub_term_input_t = *mut grub_term_input;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_term_coordinate {
    pub x: grub_uint16_t,
    pub y: grub_uint16_t,
}
#[test]
fn bindgen_test_layout_grub_term_coordinate() {
    assert_eq!(
        ::core::mem::size_of::<grub_term_coordinate>(),
        4usize,
        concat!("Size of: ", stringify!(grub_term_coordinate))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_term_coordinate>(),
        2usize,
        concat!("Alignment of ", stringify!(grub_term_coordinate))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_coordinate>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_coordinate),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_coordinate>())).y as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_coordinate),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_term_output {
    pub next: *mut grub_term_output,
    pub prev: *mut *mut grub_term_output,
    pub name: *const cty::c_char,
    pub init:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_output) -> grub_err_t>,
    pub fini:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_output) -> grub_err_t>,
    pub putchar: ::core::option::Option<
        unsafe extern "C" fn(term: *mut grub_term_output, c: *const grub_unicode_glyph),
    >,
    pub getcharwidth: ::core::option::Option<
        unsafe extern "C" fn(
            term: *mut grub_term_output,
            c: *const grub_unicode_glyph,
        ) -> grub_size_t,
    >,
    pub getwh: ::core::option::Option<
        unsafe extern "C" fn(term: *mut grub_term_output) -> grub_term_coordinate,
    >,
    pub getxy: ::core::option::Option<
        unsafe extern "C" fn(term: *mut grub_term_output) -> grub_term_coordinate,
    >,
    pub gotoxy: ::core::option::Option<
        unsafe extern "C" fn(term: *mut grub_term_output, pos: grub_term_coordinate),
    >,
    pub cls: ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_output)>,
    pub setcolorstate: ::core::option::Option<
        unsafe extern "C" fn(term: *mut grub_term_output, state: grub_term_color_state),
    >,
    pub setcursor:
        ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_output, on: cty::c_int)>,
    pub refresh: ::core::option::Option<unsafe extern "C" fn(term: *mut grub_term_output)>,
    pub fullscreen: ::core::option::Option<unsafe extern "C" fn() -> grub_err_t>,
    pub flags: grub_uint32_t,
    pub progress_update_divisor: grub_uint32_t,
    pub progress_update_counter: grub_uint32_t,
    pub data: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_grub_term_output() {
    assert_eq!(
        ::core::mem::size_of::<grub_term_output>(),
        144usize,
        concat!("Size of: ", stringify!(grub_term_output))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_term_output>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_term_output))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).fini as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).putchar as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(putchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).getcharwidth as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(getcharwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).getwh as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(getwh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).getxy as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(getxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).gotoxy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(gotoxy)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).cls as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(cls)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).setcolorstate as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(setcolorstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).setcursor as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(setcursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).refresh as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(refresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).fullscreen as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(fullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).flags as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_output>())).progress_update_divisor as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(progress_update_divisor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_output>())).progress_update_counter as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(progress_update_counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_output>())).data as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_output),
            "::",
            stringify!(data)
        )
    );
}
pub type grub_term_output_t = *mut grub_term_output;
extern "C" {
    pub static mut grub_term_normal_color: grub_uint8_t;
}
extern "C" {
    pub static mut grub_term_highlight_color: grub_uint8_t;
}
extern "C" {
    pub static mut grub_term_outputs_disabled: *mut grub_term_output;
}
extern "C" {
    pub static mut grub_term_inputs_disabled: *mut grub_term_input;
}
extern "C" {
    pub static mut grub_term_outputs: *mut grub_term_output;
}
extern "C" {
    pub static mut grub_term_inputs: *mut grub_term_input;
}
extern "C" {
    pub fn grub_putcode(code: grub_uint32_t, term: *mut grub_term_output);
}
extern "C" {
    pub fn grub_getkey() -> cty::c_int;
}
extern "C" {
    pub fn grub_getkey_noblock() -> cty::c_int;
}
extern "C" {
    pub fn grub_getkeystatus() -> cty::c_int;
}
extern "C" {
    pub fn grub_key_is_interrupt(key: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn grub_cls();
}
extern "C" {
    pub fn grub_refresh();
}
extern "C" {
    pub fn grub_puts_terminal(str_: *const cty::c_char, term: *mut grub_term_output);
}
extern "C" {
    pub fn grub_term_save_pos() -> *mut grub_term_coordinate;
}
extern "C" {
    pub fn grub_term_restore_pos(pos: *mut grub_term_coordinate);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_term_autoload {
    pub next: *mut grub_term_autoload,
    pub name: *mut cty::c_char,
    pub modname: *mut cty::c_char,
}
#[test]
fn bindgen_test_layout_grub_term_autoload() {
    assert_eq!(
        ::core::mem::size_of::<grub_term_autoload>(),
        24usize,
        concat!("Size of: ", stringify!(grub_term_autoload))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_term_autoload>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_term_autoload))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_autoload>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_autoload),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_autoload>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_autoload),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_term_autoload>())).modname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_autoload),
            "::",
            stringify!(modname)
        )
    );
}
extern "C" {
    pub static mut grub_term_input_autoload: *mut grub_term_autoload;
}
extern "C" {
    pub static mut grub_term_output_autoload: *mut grub_term_autoload;
}
extern "C" {
    pub static mut grub_term_poll_usb:
        ::core::option::Option<unsafe extern "C" fn(wait_for_completion: cty::c_int)>;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_menu_entry_class {
    pub name: *mut cty::c_char,
    pub next: *mut grub_menu_entry_class,
}
#[test]
fn bindgen_test_layout_grub_menu_entry_class() {
    assert_eq!(
        ::core::mem::size_of::<grub_menu_entry_class>(),
        16usize,
        concat!("Size of: ", stringify!(grub_menu_entry_class))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_menu_entry_class>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_menu_entry_class))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry_class>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry_class),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry_class>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry_class),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_menu_entry {
    pub title: *const cty::c_char,
    pub id: *const cty::c_char,
    pub restricted: cty::c_int,
    pub users: *const cty::c_char,
    pub classes: *mut grub_menu_entry_class,
    pub sourcecode: *const cty::c_char,
    pub argc: cty::c_int,
    pub args: *mut *mut cty::c_char,
    pub hotkey: cty::c_int,
    pub submenu: cty::c_int,
    pub next: *mut grub_menu_entry,
}
#[test]
fn bindgen_test_layout_grub_menu_entry() {
    assert_eq!(
        ::core::mem::size_of::<grub_menu_entry>(),
        80usize,
        concat!("Size of: ", stringify!(grub_menu_entry))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_menu_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_menu_entry))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).title as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).restricted as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(restricted)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).users as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(users)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).classes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).sourcecode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(sourcecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).argc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).args as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).hotkey as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(hotkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).submenu as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(submenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu_entry>())).next as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_entry),
            "::",
            stringify!(next)
        )
    );
}
pub type grub_menu_entry_t = *mut grub_menu_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_menu {
    pub size: cty::c_int,
    pub entry_list: grub_menu_entry_t,
}
#[test]
fn bindgen_test_layout_grub_menu() {
    assert_eq!(
        ::core::mem::size_of::<grub_menu>(),
        16usize,
        concat!("Size of: ", stringify!(grub_menu))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_menu>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_menu))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_menu>())).entry_list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu),
            "::",
            stringify!(entry_list)
        )
    );
}
pub type grub_menu_t = *mut grub_menu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_menu_execute_callback {
    pub notify_booting: ::core::option::Option<
        unsafe extern "C" fn(entry: grub_menu_entry_t, userdata: *mut cty::c_void),
    >,
    pub notify_fallback: ::core::option::Option<
        unsafe extern "C" fn(entry: grub_menu_entry_t, userdata: *mut cty::c_void),
    >,
    pub notify_failure: ::core::option::Option<unsafe extern "C" fn(userdata: *mut cty::c_void)>,
}
#[test]
fn bindgen_test_layout_grub_menu_execute_callback() {
    assert_eq!(
        ::core::mem::size_of::<grub_menu_execute_callback>(),
        24usize,
        concat!("Size of: ", stringify!(grub_menu_execute_callback))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_menu_execute_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_menu_execute_callback))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_menu_execute_callback>())).notify_booting as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_execute_callback),
            "::",
            stringify!(notify_booting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_menu_execute_callback>())).notify_fallback as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_execute_callback),
            "::",
            stringify!(notify_fallback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_menu_execute_callback>())).notify_failure as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_menu_execute_callback),
            "::",
            stringify!(notify_failure)
        )
    );
}
pub type grub_menu_execute_callback_t = *mut grub_menu_execute_callback;
extern "C" {
    pub fn grub_menu_get_entry(menu: grub_menu_t, no: cty::c_int) -> grub_menu_entry_t;
}
extern "C" {
    pub fn grub_menu_get_timeout() -> cty::c_int;
}
extern "C" {
    pub fn grub_menu_set_timeout(timeout: cty::c_int);
}
extern "C" {
    pub fn grub_menu_entry_run(entry: grub_menu_entry_t);
}
extern "C" {
    pub fn grub_menu_get_default_entry_index(menu: grub_menu_t) -> cty::c_int;
}
extern "C" {
    pub fn grub_menu_init();
}
extern "C" {
    pub fn grub_menu_fini();
}
pub type grub_env_read_hook_t = ::core::option::Option<
    unsafe extern "C" fn(var: *mut grub_env_var, val: *const cty::c_char) -> *const cty::c_char,
>;
pub type grub_env_write_hook_t = ::core::option::Option<
    unsafe extern "C" fn(var: *mut grub_env_var, val: *const cty::c_char) -> *mut cty::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_env_var {
    pub name: *mut cty::c_char,
    pub value: *mut cty::c_char,
    pub read_hook: grub_env_read_hook_t,
    pub write_hook: grub_env_write_hook_t,
    pub next: *mut grub_env_var,
    pub prevp: *mut *mut grub_env_var,
    pub sorted_next: *mut grub_env_var,
    pub global: cty::c_int,
}
#[test]
fn bindgen_test_layout_grub_env_var() {
    assert_eq!(
        ::core::mem::size_of::<grub_env_var>(),
        64usize,
        concat!("Size of: ", stringify!(grub_env_var))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_env_var>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_env_var))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).read_hook as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(read_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).write_hook as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(write_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).prevp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(prevp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).sorted_next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(sorted_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_env_var>())).global as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_env_var),
            "::",
            stringify!(global)
        )
    );
}
extern "C" {
    pub fn grub_env_set(name: *const cty::c_char, val: *const cty::c_char) -> grub_err_t;
}
extern "C" {
    pub fn grub_env_get(name: *const cty::c_char) -> *const cty::c_char;
}
extern "C" {
    pub fn grub_env_unset(name: *const cty::c_char);
}
extern "C" {
    pub fn grub_env_update_get_sorted() -> *mut grub_env_var;
}
extern "C" {
    pub fn grub_register_variable_hook(
        name: *const cty::c_char,
        read_hook: grub_env_read_hook_t,
        write_hook: grub_env_write_hook_t,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_env_context_open() -> grub_err_t;
}
extern "C" {
    pub fn grub_env_context_close() -> grub_err_t;
}
extern "C" {
    pub fn grub_env_export(name: *const cty::c_char) -> grub_err_t;
}
extern "C" {
    pub fn grub_env_unset_menu();
}
extern "C" {
    pub fn grub_env_get_menu() -> grub_menu_t;
}
extern "C" {
    pub fn grub_env_set_menu(nmenu: grub_menu_t);
}
extern "C" {
    pub fn grub_env_extractor_open(source: cty::c_int) -> grub_err_t;
}
extern "C" {
    pub fn grub_env_extractor_close(source: cty::c_int) -> grub_err_t;
}
pub const grub_command_flags_GRUB_COMMAND_FLAG_EXTCMD: grub_command_flags = 16;
pub const grub_command_flags_GRUB_COMMAND_FLAG_DYNCMD: grub_command_flags = 32;
pub const grub_command_flags_GRUB_COMMAND_FLAG_BLOCKS: grub_command_flags = 64;
pub const grub_command_flags_GRUB_COMMAND_ACCEPT_DASH: grub_command_flags = 128;
pub const grub_command_flags_GRUB_COMMAND_OPTIONS_AT_START: grub_command_flags = 256;
pub const grub_command_flags_GRUB_COMMAND_FLAG_EXTRACTOR: grub_command_flags = 512;
pub type grub_command_flags = cty::c_uint;
pub use self::grub_command_flags as grub_command_flags_t;
pub type grub_command_func_t = ::core::option::Option<
    unsafe extern "C" fn(
        cmd: *mut grub_command,
        argc: cty::c_int,
        argv: *mut *mut cty::c_char,
    ) -> grub_err_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_command {
    pub next: *mut grub_command,
    pub prev: *mut *mut grub_command,
    pub name: *const cty::c_char,
    pub prio: cty::c_int,
    pub func: grub_command_func_t,
    pub flags: grub_command_flags_t,
    pub summary: *const cty::c_char,
    pub description: *const cty::c_char,
    pub data: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_grub_command() {
    assert_eq!(
        ::core::mem::size_of::<grub_command>(),
        72usize,
        concat!("Size of: ", stringify!(grub_command))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_command>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_command))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).prio as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).func as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).flags as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).summary as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(summary)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).description as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_command>())).data as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_command),
            "::",
            stringify!(data)
        )
    );
}
pub type grub_command_t = *mut grub_command;
extern "C" {
    pub static mut grub_command_list: grub_command_t;
}
extern "C" {
    pub fn grub_register_command_prio(
        name: *const cty::c_char,
        func: grub_command_func_t,
        summary: *const cty::c_char,
        description: *const cty::c_char,
        prio: cty::c_int,
    ) -> grub_command_t;
}
extern "C" {
    pub fn grub_register_command_lockdown(
        name: *const cty::c_char,
        func: grub_command_func_t,
        summary: *const cty::c_char,
        description: *const cty::c_char,
    ) -> grub_command_t;
}
extern "C" {
    pub fn grub_unregister_command(cmd: grub_command_t);
}
extern "C" {
    pub fn grub_register_core_commands();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_net {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_device {
    pub disk: *mut grub_disk,
    pub net: *mut grub_net,
}
#[test]
fn bindgen_test_layout_grub_device() {
    assert_eq!(
        ::core::mem::size_of::<grub_device>(),
        16usize,
        concat!("Size of: ", stringify!(grub_device))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_device>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_device))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_device>())).disk as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_device),
            "::",
            stringify!(disk)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_device>())).net as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_device),
            "::",
            stringify!(net)
        )
    );
}
pub type grub_device_t = *mut grub_device;
pub type grub_device_iterate_hook_t = ::core::option::Option<
    unsafe extern "C" fn(name: *const cty::c_char, data: *mut cty::c_void) -> cty::c_int,
>;
extern "C" {
    pub fn grub_device_open(name: *const cty::c_char) -> grub_device_t;
}
extern "C" {
    pub fn grub_device_close(device: grub_device_t) -> grub_err_t;
}
extern "C" {
    pub fn grub_device_iterate(
        hook: grub_device_iterate_hook_t,
        hook_data: *mut cty::c_void,
    ) -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_dirhook_info {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub mtime: grub_int64_t,
    pub inode: grub_uint64_t,
}
#[test]
fn bindgen_test_layout_grub_dirhook_info() {
    assert_eq!(
        ::core::mem::size_of::<grub_dirhook_info>(),
        24usize,
        concat!("Size of: ", stringify!(grub_dirhook_info))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_dirhook_info>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_dirhook_info))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dirhook_info>())).mtime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dirhook_info),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dirhook_info>())).inode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dirhook_info),
            "::",
            stringify!(inode)
        )
    );
}
impl grub_dirhook_info {
    #[inline]
    pub fn dir(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mtimeset(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mtimeset(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn case_insensitive(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_case_insensitive(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn inodeset(&self) -> cty::c_uint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inodeset(&mut self, val: cty::c_uint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dir: cty::c_uint,
        mtimeset: cty::c_uint,
        case_insensitive: cty::c_uint,
        inodeset: cty::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dir: u32 = unsafe { ::core::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let mtimeset: u32 = unsafe { ::core::mem::transmute(mtimeset) };
            mtimeset as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let case_insensitive: u32 = unsafe { ::core::mem::transmute(case_insensitive) };
            case_insensitive as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let inodeset: u32 = unsafe { ::core::mem::transmute(inodeset) };
            inodeset as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type grub_fs_dir_hook_t = ::core::option::Option<
    unsafe extern "C" fn(
        filename: *const cty::c_char,
        info: *const grub_dirhook_info,
        data: *mut cty::c_void,
    ) -> cty::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_fs {
    pub next: *mut grub_fs,
    pub prev: *mut *mut grub_fs,
    pub name: *const cty::c_char,
    pub fs_dir: ::core::option::Option<
        unsafe extern "C" fn(
            device: grub_device_t,
            path: *const cty::c_char,
            hook: grub_fs_dir_hook_t,
            hook_data: *mut cty::c_void,
        ) -> grub_err_t,
    >,
    pub fs_open: ::core::option::Option<
        unsafe extern "C" fn(file: *mut grub_file, name: *const cty::c_char) -> grub_err_t,
    >,
    pub fs_read: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut grub_file,
            buf: *mut cty::c_char,
            len: grub_size_t,
        ) -> grub_ssize_t,
    >,
    pub fs_close: ::core::option::Option<unsafe extern "C" fn(file: *mut grub_file) -> grub_err_t>,
    pub fs_label: ::core::option::Option<
        unsafe extern "C" fn(device: grub_device_t, label: *mut *mut cty::c_char) -> grub_err_t,
    >,
    pub fs_uuid: ::core::option::Option<
        unsafe extern "C" fn(device: grub_device_t, uuid: *mut *mut cty::c_char) -> grub_err_t,
    >,
    pub fs_mtime: ::core::option::Option<
        unsafe extern "C" fn(device: grub_device_t, timebuf: *mut grub_int64_t) -> grub_err_t,
    >,
}
#[test]
fn bindgen_test_layout_grub_fs() {
    assert_eq!(
        ::core::mem::size_of::<grub_fs>(),
        80usize,
        concat!("Size of: ", stringify!(grub_fs))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_fs>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_fs))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_dir as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_open as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_close as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_label as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_label)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_uuid as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_fs>())).fs_mtime as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_fs),
            "::",
            stringify!(fs_mtime)
        )
    );
}
pub type grub_fs_t = *mut grub_fs;
extern "C" {
    pub static mut grub_fs_blocklist: grub_fs;
}
pub type grub_fs_autoload_hook_t = ::core::option::Option<unsafe extern "C" fn() -> cty::c_int>;
extern "C" {
    pub static mut grub_fs_autoload_hook: grub_fs_autoload_hook_t;
}
extern "C" {
    pub static mut grub_fs_list: grub_fs_t;
}
extern "C" {
    pub fn grub_fs_probe(device: grub_device_t) -> grub_fs_t;
}
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_BIOSDISK_ID: grub_disk_dev_id = 0;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_OFDISK_ID: grub_disk_dev_id = 1;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_LOOPBACK_ID: grub_disk_dev_id = 2;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_EFIDISK_ID: grub_disk_dev_id = 3;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_DISKFILTER_ID: grub_disk_dev_id = 4;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_HOST_ID: grub_disk_dev_id = 5;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_ATA_ID: grub_disk_dev_id = 6;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_MEMDISK_ID: grub_disk_dev_id = 7;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_NAND_ID: grub_disk_dev_id = 8;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_SCSI_ID: grub_disk_dev_id = 9;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_CRYPTODISK_ID: grub_disk_dev_id = 10;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_ARCDISK_ID: grub_disk_dev_id = 11;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_HOSTDISK_ID: grub_disk_dev_id = 12;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_PROCFS_ID: grub_disk_dev_id = 13;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_CBFSDISK_ID: grub_disk_dev_id = 14;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_UBOOTDISK_ID: grub_disk_dev_id = 15;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_XEN: grub_disk_dev_id = 16;
pub const grub_disk_dev_id_GRUB_DISK_DEVICE_OBDISK_ID: grub_disk_dev_id = 17;
pub type grub_disk_dev_id = cty::c_uint;
pub const grub_disk_pull_t_GRUB_DISK_PULL_NONE: grub_disk_pull_t = 0;
pub const grub_disk_pull_t_GRUB_DISK_PULL_REMOVABLE: grub_disk_pull_t = 1;
pub const grub_disk_pull_t_GRUB_DISK_PULL_RESCAN: grub_disk_pull_t = 2;
pub const grub_disk_pull_t_GRUB_DISK_PULL_MAX: grub_disk_pull_t = 3;
pub type grub_disk_pull_t = cty::c_uint;
pub type grub_disk_dev_iterate_hook_t = ::core::option::Option<
    unsafe extern "C" fn(name: *const cty::c_char, data: *mut cty::c_void) -> cty::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_disk_dev {
    pub name: *const cty::c_char,
    pub id: grub_disk_dev_id,
    pub disk_iterate: ::core::option::Option<
        unsafe extern "C" fn(
            hook: grub_disk_dev_iterate_hook_t,
            hook_data: *mut cty::c_void,
            pull: grub_disk_pull_t,
        ) -> cty::c_int,
    >,
    pub disk_open: ::core::option::Option<
        unsafe extern "C" fn(name: *const cty::c_char, disk: *mut grub_disk) -> grub_err_t,
    >,
    pub disk_close: ::core::option::Option<unsafe extern "C" fn(disk: *mut grub_disk)>,
    pub disk_read: ::core::option::Option<
        unsafe extern "C" fn(
            disk: *mut grub_disk,
            sector: grub_disk_addr_t,
            size: grub_size_t,
            buf: *mut cty::c_char,
        ) -> grub_err_t,
    >,
    pub disk_write: ::core::option::Option<
        unsafe extern "C" fn(
            disk: *mut grub_disk,
            sector: grub_disk_addr_t,
            size: grub_size_t,
            buf: *const cty::c_char,
        ) -> grub_err_t,
    >,
    pub next: *mut grub_disk_dev,
}
#[test]
fn bindgen_test_layout_grub_disk_dev() {
    assert_eq!(
        ::core::mem::size_of::<grub_disk_dev>(),
        64usize,
        concat!("Size of: ", stringify!(grub_disk_dev))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_disk_dev>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_disk_dev))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).disk_iterate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(disk_iterate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).disk_open as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(disk_open)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).disk_close as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(disk_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).disk_read as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(disk_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).disk_write as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(disk_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_dev>())).next as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_dev),
            "::",
            stringify!(next)
        )
    );
}
pub type grub_disk_dev_t = *mut grub_disk_dev;
extern "C" {
    pub static mut grub_disk_dev_list: grub_disk_dev_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_partition {
    _unused: [u8; 0],
}
pub type grub_disk_read_hook_t = ::core::option::Option<
    unsafe extern "C" fn(
        sector: grub_disk_addr_t,
        offset: cty::c_uint,
        length: cty::c_uint,
        data: *mut cty::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_disk {
    pub name: *const cty::c_char,
    pub dev: grub_disk_dev_t,
    pub total_sectors: grub_uint64_t,
    pub log_sector_size: cty::c_uint,
    pub max_agglomerate: cty::c_uint,
    pub id: cty::c_ulong,
    pub partition: *mut grub_partition,
    pub read_hook: grub_disk_read_hook_t,
    pub read_hook_data: *mut cty::c_void,
    pub data: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_grub_disk() {
    assert_eq!(
        ::core::mem::size_of::<grub_disk>(),
        72usize,
        concat!("Size of: ", stringify!(grub_disk))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_disk>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_disk))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).dev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).total_sectors as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(total_sectors)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).log_sector_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(log_sector_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).max_agglomerate as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(max_agglomerate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).partition as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(partition)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).read_hook as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(read_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).read_hook_data as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(read_hook_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk>())).data as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk),
            "::",
            stringify!(data)
        )
    );
}
pub type grub_disk_t = *mut grub_disk;
extern "C" {
    pub fn grub_disk_cache_invalidate_all();
}
extern "C" {
    pub fn grub_disk_dev_register(dev: grub_disk_dev_t);
}
extern "C" {
    pub fn grub_disk_dev_unregister(dev: grub_disk_dev_t);
}
extern "C" {
    pub fn grub_disk_open(name: *const cty::c_char) -> grub_disk_t;
}
extern "C" {
    pub fn grub_disk_close(disk: grub_disk_t);
}
extern "C" {
    pub fn grub_disk_read(
        disk: grub_disk_t,
        sector: grub_disk_addr_t,
        offset: grub_off_t,
        size: grub_size_t,
        buf: *mut cty::c_void,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_disk_write(
        disk: grub_disk_t,
        sector: grub_disk_addr_t,
        offset: grub_off_t,
        size: grub_size_t,
        buf: *const cty::c_void,
    ) -> grub_err_t;
}
extern "C" {
    pub static mut grub_disk_write_weak: ::core::option::Option<
        unsafe extern "C" fn(
            disk: grub_disk_t,
            sector: grub_disk_addr_t,
            offset: grub_off_t,
            size: grub_size_t,
            buf: *const cty::c_void,
        ) -> grub_err_t,
    >;
}
extern "C" {
    pub fn grub_disk_native_sectors(disk: grub_disk_t) -> grub_uint64_t;
}
extern "C" {
    pub static mut grub_disk_firmware_fini: ::core::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut grub_disk_firmware_is_tainted: cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_disk_cache {
    pub dev_id: grub_disk_dev_id,
    pub disk_id: cty::c_ulong,
    pub sector: grub_disk_addr_t,
    pub data: *mut cty::c_char,
    pub lock: cty::c_int,
}
#[test]
fn bindgen_test_layout_grub_disk_cache() {
    assert_eq!(
        ::core::mem::size_of::<grub_disk_cache>(),
        40usize,
        concat!("Size of: ", stringify!(grub_disk_cache))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_disk_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_disk_cache))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_cache>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_cache),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_cache>())).disk_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_cache),
            "::",
            stringify!(disk_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_cache>())).sector as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_cache),
            "::",
            stringify!(sector)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_cache>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_cache),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_disk_cache>())).lock as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_disk_cache),
            "::",
            stringify!(lock)
        )
    );
}
extern "C" {
    pub static mut grub_disk_cache_table: [grub_disk_cache; 1021usize];
}
pub const grub_file_type_GRUB_FILE_TYPE_NONE: grub_file_type = 0;
pub const grub_file_type_GRUB_FILE_TYPE_GRUB_MODULE: grub_file_type = 1;
pub const grub_file_type_GRUB_FILE_TYPE_LOOPBACK: grub_file_type = 2;
pub const grub_file_type_GRUB_FILE_TYPE_LINUX_KERNEL: grub_file_type = 3;
pub const grub_file_type_GRUB_FILE_TYPE_LINUX_INITRD: grub_file_type = 4;
pub const grub_file_type_GRUB_FILE_TYPE_MULTIBOOT_KERNEL: grub_file_type = 5;
pub const grub_file_type_GRUB_FILE_TYPE_MULTIBOOT_MODULE: grub_file_type = 6;
pub const grub_file_type_GRUB_FILE_TYPE_XEN_HYPERVISOR: grub_file_type = 7;
pub const grub_file_type_GRUB_FILE_TYPE_XEN_MODULE: grub_file_type = 8;
pub const grub_file_type_GRUB_FILE_TYPE_BSD_KERNEL: grub_file_type = 9;
pub const grub_file_type_GRUB_FILE_TYPE_FREEBSD_ENV: grub_file_type = 10;
pub const grub_file_type_GRUB_FILE_TYPE_FREEBSD_MODULE: grub_file_type = 11;
pub const grub_file_type_GRUB_FILE_TYPE_FREEBSD_MODULE_ELF: grub_file_type = 12;
pub const grub_file_type_GRUB_FILE_TYPE_NETBSD_MODULE: grub_file_type = 13;
pub const grub_file_type_GRUB_FILE_TYPE_OPENBSD_RAMDISK: grub_file_type = 14;
pub const grub_file_type_GRUB_FILE_TYPE_XNU_INFO_PLIST: grub_file_type = 15;
pub const grub_file_type_GRUB_FILE_TYPE_XNU_MKEXT: grub_file_type = 16;
pub const grub_file_type_GRUB_FILE_TYPE_XNU_KEXT: grub_file_type = 17;
pub const grub_file_type_GRUB_FILE_TYPE_XNU_KERNEL: grub_file_type = 18;
pub const grub_file_type_GRUB_FILE_TYPE_XNU_RAMDISK: grub_file_type = 19;
pub const grub_file_type_GRUB_FILE_TYPE_XNU_HIBERNATE_IMAGE: grub_file_type = 20;
pub const grub_file_type_GRUB_FILE_XNU_DEVPROP: grub_file_type = 21;
pub const grub_file_type_GRUB_FILE_TYPE_PLAN9_KERNEL: grub_file_type = 22;
pub const grub_file_type_GRUB_FILE_TYPE_NTLDR: grub_file_type = 23;
pub const grub_file_type_GRUB_FILE_TYPE_TRUECRYPT: grub_file_type = 24;
pub const grub_file_type_GRUB_FILE_TYPE_FREEDOS: grub_file_type = 25;
pub const grub_file_type_GRUB_FILE_TYPE_PXECHAINLOADER: grub_file_type = 26;
pub const grub_file_type_GRUB_FILE_TYPE_PCCHAINLOADER: grub_file_type = 27;
pub const grub_file_type_GRUB_FILE_TYPE_COREBOOT_CHAINLOADER: grub_file_type = 28;
pub const grub_file_type_GRUB_FILE_TYPE_EFI_CHAINLOADED_IMAGE: grub_file_type = 29;
pub const grub_file_type_GRUB_FILE_TYPE_SIGNATURE: grub_file_type = 30;
pub const grub_file_type_GRUB_FILE_TYPE_PUBLIC_KEY: grub_file_type = 31;
pub const grub_file_type_GRUB_FILE_TYPE_PUBLIC_KEY_TRUST: grub_file_type = 32;
pub const grub_file_type_GRUB_FILE_TYPE_PRINT_BLOCKLIST: grub_file_type = 33;
pub const grub_file_type_GRUB_FILE_TYPE_TESTLOAD: grub_file_type = 34;
pub const grub_file_type_GRUB_FILE_TYPE_GET_SIZE: grub_file_type = 35;
pub const grub_file_type_GRUB_FILE_TYPE_FONT: grub_file_type = 36;
pub const grub_file_type_GRUB_FILE_TYPE_ZFS_ENCRYPTION_KEY: grub_file_type = 37;
pub const grub_file_type_GRUB_FILE_TYPE_FSTEST: grub_file_type = 38;
pub const grub_file_type_GRUB_FILE_TYPE_MOUNT: grub_file_type = 39;
pub const grub_file_type_GRUB_FILE_TYPE_FILE_ID: grub_file_type = 40;
pub const grub_file_type_GRUB_FILE_TYPE_ACPI_TABLE: grub_file_type = 41;
pub const grub_file_type_GRUB_FILE_TYPE_DEVICE_TREE_IMAGE: grub_file_type = 42;
pub const grub_file_type_GRUB_FILE_TYPE_CAT: grub_file_type = 43;
pub const grub_file_type_GRUB_FILE_TYPE_HEXCAT: grub_file_type = 44;
pub const grub_file_type_GRUB_FILE_TYPE_CMP: grub_file_type = 45;
pub const grub_file_type_GRUB_FILE_TYPE_HASHLIST: grub_file_type = 46;
pub const grub_file_type_GRUB_FILE_TYPE_TO_HASH: grub_file_type = 47;
pub const grub_file_type_GRUB_FILE_TYPE_KEYBOARD_LAYOUT: grub_file_type = 48;
pub const grub_file_type_GRUB_FILE_TYPE_PIXMAP: grub_file_type = 49;
pub const grub_file_type_GRUB_FILE_TYPE_GRUB_MODULE_LIST: grub_file_type = 50;
pub const grub_file_type_GRUB_FILE_TYPE_CONFIG: grub_file_type = 51;
pub const grub_file_type_GRUB_FILE_TYPE_THEME: grub_file_type = 52;
pub const grub_file_type_GRUB_FILE_TYPE_GETTEXT_CATALOG: grub_file_type = 53;
pub const grub_file_type_GRUB_FILE_TYPE_FS_SEARCH: grub_file_type = 54;
pub const grub_file_type_GRUB_FILE_TYPE_AUDIO: grub_file_type = 55;
pub const grub_file_type_GRUB_FILE_TYPE_VBE_DUMP: grub_file_type = 56;
pub const grub_file_type_GRUB_FILE_TYPE_LOADENV: grub_file_type = 57;
pub const grub_file_type_GRUB_FILE_TYPE_SAVEENV: grub_file_type = 58;
pub const grub_file_type_GRUB_FILE_TYPE_VERIFY_SIGNATURE: grub_file_type = 59;
pub const grub_file_type_GRUB_FILE_TYPE_MASK: grub_file_type = 65535;
pub const grub_file_type_GRUB_FILE_TYPE_SKIP_SIGNATURE: grub_file_type = 65536;
pub const grub_file_type_GRUB_FILE_TYPE_NO_DECOMPRESS: grub_file_type = 131072;
pub type grub_file_type = cty::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_file {
    pub name: *mut cty::c_char,
    pub device: grub_device_t,
    pub fs: grub_fs_t,
    pub offset: grub_off_t,
    pub progress_offset: grub_off_t,
    pub last_progress_time: grub_uint64_t,
    pub last_progress_offset: grub_off_t,
    pub estimated_speed: grub_uint64_t,
    pub size: grub_off_t,
    pub not_easily_seekable: cty::c_int,
    pub data: *mut cty::c_void,
    pub read_hook: grub_disk_read_hook_t,
    pub read_hook_data: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_grub_file() {
    assert_eq!(
        ::core::mem::size_of::<grub_file>(),
        104usize,
        concat!("Size of: ", stringify!(grub_file))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_file>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_file))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).device as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).fs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).progress_offset as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(progress_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).last_progress_time as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(last_progress_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).last_progress_offset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(last_progress_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).estimated_speed as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(estimated_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).not_easily_seekable as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(not_easily_seekable)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).data as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).read_hook as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(read_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_file>())).read_hook_data as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_file),
            "::",
            stringify!(read_hook_data)
        )
    );
}
pub type grub_file_t = *mut grub_file;
extern "C" {
    pub static mut grub_file_progress_hook: grub_disk_read_hook_t;
}
pub const grub_file_filter_id_GRUB_FILE_FILTER_VERIFY: grub_file_filter_id = 0;
pub const grub_file_filter_id_GRUB_FILE_FILTER_GZIO: grub_file_filter_id = 1;
pub const grub_file_filter_id_GRUB_FILE_FILTER_XZIO: grub_file_filter_id = 2;
pub const grub_file_filter_id_GRUB_FILE_FILTER_LZOPIO: grub_file_filter_id = 3;
pub const grub_file_filter_id_GRUB_FILE_FILTER_MAX: grub_file_filter_id = 4;
pub const grub_file_filter_id_GRUB_FILE_FILTER_COMPRESSION_FIRST: grub_file_filter_id = 1;
pub const grub_file_filter_id_GRUB_FILE_FILTER_COMPRESSION_LAST: grub_file_filter_id = 3;
pub type grub_file_filter_id = cty::c_uint;
pub use self::grub_file_filter_id as grub_file_filter_id_t;
pub type grub_file_filter_t = ::core::option::Option<
    unsafe extern "C" fn(in_: grub_file_t, type_: grub_file_type) -> grub_file_t,
>;
extern "C" {
    pub static mut grub_file_filters: [grub_file_filter_t; 4usize];
}
extern "C" {
    pub fn grub_file_get_device_name(name: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_file_open(name: *const cty::c_char, type_: grub_file_type) -> grub_file_t;
}
extern "C" {
    pub fn grub_file_read(
        file: grub_file_t,
        buf: *mut cty::c_void,
        len: grub_size_t,
    ) -> grub_ssize_t;
}
extern "C" {
    pub fn grub_file_seek(file: grub_file_t, offset: grub_off_t) -> grub_off_t;
}
extern "C" {
    pub fn grub_file_close(file: grub_file_t) -> grub_err_t;
}
extern "C" {
    pub fn grub_file_offset_open(
        parent: grub_file_t,
        type_: grub_file_type,
        start: grub_off_t,
        size: grub_off_t,
    ) -> grub_file_t;
}
extern "C" {
    pub fn grub_file_offset_close(file: grub_file_t);
}
pub const grub_completion_type_GRUB_COMPLETION_TYPE_COMMAND: grub_completion_type = 0;
pub const grub_completion_type_GRUB_COMPLETION_TYPE_DEVICE: grub_completion_type = 1;
pub const grub_completion_type_GRUB_COMPLETION_TYPE_PARTITION: grub_completion_type = 2;
pub const grub_completion_type_GRUB_COMPLETION_TYPE_FILE: grub_completion_type = 3;
pub const grub_completion_type_GRUB_COMPLETION_TYPE_ARGUMENT: grub_completion_type = 4;
pub type grub_completion_type = cty::c_uint;
pub use self::grub_completion_type as grub_completion_type_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_menu_viewer {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut grub_normal_text_menu_viewer: grub_menu_viewer;
}
extern "C" {
    pub static mut grub_normal_exit_level: cty::c_int;
}
extern "C" {
    pub fn grub_enter_normal_mode(config: *const cty::c_char);
}
extern "C" {
    pub fn grub_normal_execute(config: *const cty::c_char, nested: cty::c_int, batch: cty::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_term_screen_geometry {
    pub num_entries: cty::c_int,
    pub first_entry_y: cty::c_int,
    pub first_entry_x: cty::c_int,
    pub entry_width: cty::c_int,
    pub timeout_y: cty::c_int,
    pub timeout_lines: cty::c_int,
    pub border: cty::c_int,
    pub right_margin: cty::c_int,
}
#[test]
fn bindgen_test_layout_grub_term_screen_geometry() {
    assert_eq!(
        ::core::mem::size_of::<grub_term_screen_geometry>(),
        32usize,
        concat!("Size of: ", stringify!(grub_term_screen_geometry))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_term_screen_geometry>(),
        4usize,
        concat!("Alignment of ", stringify!(grub_term_screen_geometry))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).num_entries as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).first_entry_y as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(first_entry_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).first_entry_x as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(first_entry_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).entry_width as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(entry_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).timeout_y as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(timeout_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).timeout_lines as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(timeout_lines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).border as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(border)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<grub_term_screen_geometry>())).right_margin as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_term_screen_geometry),
            "::",
            stringify!(right_margin)
        )
    );
}
extern "C" {
    pub fn grub_menu_init_page(
        nested: cty::c_int,
        edit: cty::c_int,
        geo: *mut grub_term_screen_geometry,
        term: *mut grub_term_output,
    );
}
extern "C" {
    pub fn grub_normal_init_page(term: *mut grub_term_output, y: cty::c_int);
}
extern "C" {
    pub fn grub_file_getline(file: grub_file_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_cmdline_run(nested: cty::c_int, force_auth: cty::c_int);
}
extern "C" {
    pub fn grub_cmdline_get(prompt: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_set_history(newsize: cty::c_int) -> grub_err_t;
}
extern "C" {
    pub fn grub_normal_do_completion(
        buf: *mut cty::c_char,
        restore: *mut cty::c_int,
        hook: ::core::option::Option<
            unsafe extern "C" fn(
                item: *const cty::c_char,
                type_: grub_completion_type_t,
                count: cty::c_int,
            ),
        >,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_normal_print_device_info(name: *const cty::c_char) -> grub_err_t;
}
extern "C" {
    pub fn grub_env_write_color_normal(
        var: *mut grub_env_var,
        val: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_env_write_color_highlight(
        var: *mut grub_env_var,
        val: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn grub_parse_color_name_pair(
        ret: *mut grub_uint8_t,
        name: *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn grub_wait_after_message();
}
extern "C" {
    pub fn grub_print_ucs4(
        str_: *const grub_uint32_t,
        last_position: *const grub_uint32_t,
        margin_left: cty::c_int,
        margin_right: cty::c_int,
        term: *mut grub_term_output,
    );
}
extern "C" {
    pub fn grub_print_ucs4_menu(
        str_: *const grub_uint32_t,
        last_position: *const grub_uint32_t,
        margin_left: cty::c_int,
        margin_right: cty::c_int,
        term: *mut grub_term_output,
        skip_lines: cty::c_int,
        max_lines: cty::c_int,
        contchar: grub_uint32_t,
        pos: *mut grub_term_pos,
    );
}
extern "C" {
    pub fn grub_ucs4_count_lines(
        str_: *const grub_uint32_t,
        last_position: *const grub_uint32_t,
        margin_left: cty::c_int,
        margin_right: cty::c_int,
        term: *mut grub_term_output,
    ) -> cty::c_int;
}
extern "C" {
    pub fn grub_getstringwidth(
        str_: *mut grub_uint32_t,
        last_position: *const grub_uint32_t,
        term: *mut grub_term_output,
    ) -> grub_size_t;
}
extern "C" {
    pub fn grub_print_message_indented(
        msg: *const cty::c_char,
        margin_left: cty::c_int,
        margin_right: cty::c_int,
        term: *mut grub_term_output,
    );
}
extern "C" {
    pub fn grub_menu_text_register_instances(
        entry: cty::c_int,
        menu: grub_menu_t,
        nested: cty::c_int,
    );
}
extern "C" {
    pub fn grub_show_menu(
        menu: grub_menu_t,
        nested: cty::c_int,
        autobooted: cty::c_int,
    ) -> grub_err_t;
}
extern "C" {
    pub fn read_handler_list();
}
extern "C" {
    pub fn free_handler_list();
}
extern "C" {
    pub fn read_command_list(prefix: *const cty::c_char);
}
extern "C" {
    pub fn read_fs_list(prefix: *const cty::c_char);
}
extern "C" {
    pub fn grub_context_init();
}
extern "C" {
    pub fn grub_context_fini();
}
extern "C" {
    pub fn read_crypto_list(prefix: *const cty::c_char);
}
extern "C" {
    pub fn read_terminal_list(prefix: *const cty::c_char);
}
extern "C" {
    pub fn grub_set_more(onoff: cty::c_int);
}
extern "C" {
    pub fn grub_normal_reset_more();
}
extern "C" {
    pub fn grub_xputs_normal(str_: *const cty::c_char);
}
extern "C" {
    pub static mut grub_extractor_level: cty::c_int;
}
extern "C" {
    pub fn grub_normal_add_menu_entry(
        argc: cty::c_int,
        args: *mut *const cty::c_char,
        classes: *mut *mut cty::c_char,
        id: *const cty::c_char,
        users: *const cty::c_char,
        hotkey: *const cty::c_char,
        prefix: *const cty::c_char,
        sourcecode: *const cty::c_char,
        submenu: cty::c_int,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_normal_set_password(
        user: *const cty::c_char,
        password: *const cty::c_char,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_normal_free_menu(menu: grub_menu_t);
}
extern "C" {
    pub fn grub_normal_auth_init();
}
extern "C" {
    pub fn grub_normal_auth_fini();
}
extern "C" {
    pub fn grub_xnputs(str_: *const cty::c_char, msg_len: grub_size_t);
}
extern "C" {
    pub fn grub_dyncmd_get_cmd(cmd: grub_command_t) -> grub_command_t;
}
extern "C" {
    pub fn grub_gettext_reread_prefix(val: *const cty::c_char);
}
pub const grub_human_size_type_GRUB_HUMAN_SIZE_NORMAL: grub_human_size_type = 0;
pub const grub_human_size_type_GRUB_HUMAN_SIZE_SHORT: grub_human_size_type = 1;
pub const grub_human_size_type_GRUB_HUMAN_SIZE_SPEED: grub_human_size_type = 2;
pub type grub_human_size_type = cty::c_uint;
extern "C" {
    pub fn grub_get_human_size(
        size: grub_uint64_t,
        type_: grub_human_size_type,
    ) -> *const cty::c_char;
}
pub type Elf32_Half = grub_uint16_t;
pub type Elf64_Half = grub_uint16_t;
pub type Elf32_Word = grub_uint32_t;
pub type Elf32_Sword = grub_int32_t;
pub type Elf64_Word = grub_uint32_t;
pub type Elf64_Sword = grub_int32_t;
pub type Elf32_Xword = grub_uint64_t;
pub type Elf32_Sxword = grub_int64_t;
pub type Elf64_Xword = grub_uint64_t;
pub type Elf64_Sxword = grub_int64_t;
pub type Elf32_Addr = grub_uint32_t;
pub type Elf64_Addr = grub_uint64_t;
pub type Elf32_Off = grub_uint32_t;
pub type Elf64_Off = grub_uint64_t;
pub type Elf32_Section = grub_uint16_t;
pub type Elf64_Section = grub_uint16_t;
pub type Elf32_Versym = Elf32_Half;
pub type Elf64_Versym = Elf64_Half;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Ehdr {
    pub e_ident: [cty::c_uchar; 16usize],
    pub e_type: Elf32_Half,
    pub e_machine: Elf32_Half,
    pub e_version: Elf32_Word,
    pub e_entry: Elf32_Addr,
    pub e_phoff: Elf32_Off,
    pub e_shoff: Elf32_Off,
    pub e_flags: Elf32_Word,
    pub e_ehsize: Elf32_Half,
    pub e_phentsize: Elf32_Half,
    pub e_phnum: Elf32_Half,
    pub e_shentsize: Elf32_Half,
    pub e_shnum: Elf32_Half,
    pub e_shstrndx: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Ehdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Ehdr>(),
        52usize,
        concat!("Size of: ", stringify!(Elf32_Ehdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Ehdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Ehdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_ident as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_machine as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_machine)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_version as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_phoff as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_phoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_shoff as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_flags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_ehsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_ehsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_phentsize as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_phentsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_phnum as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_phnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_shentsize as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shentsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_shnum as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Ehdr>())).e_shstrndx as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Ehdr),
            "::",
            stringify!(e_shstrndx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Ehdr {
    pub e_ident: [cty::c_uchar; 16usize],
    pub e_type: Elf64_Half,
    pub e_machine: Elf64_Half,
    pub e_version: Elf64_Word,
    pub e_entry: Elf64_Addr,
    pub e_phoff: Elf64_Off,
    pub e_shoff: Elf64_Off,
    pub e_flags: Elf64_Word,
    pub e_ehsize: Elf64_Half,
    pub e_phentsize: Elf64_Half,
    pub e_phnum: Elf64_Half,
    pub e_shentsize: Elf64_Half,
    pub e_shnum: Elf64_Half,
    pub e_shstrndx: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Ehdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Ehdr>(),
        64usize,
        concat!("Size of: ", stringify!(Elf64_Ehdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Ehdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Ehdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_ident as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_machine as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_machine)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_version as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_phoff as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_phoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_shoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_ehsize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_ehsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_phentsize as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_phentsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_phnum as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_phnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_shentsize as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shentsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_shnum as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Ehdr>())).e_shstrndx as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Ehdr),
            "::",
            stringify!(e_shstrndx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Shdr {
    pub sh_name: Elf32_Word,
    pub sh_type: Elf32_Word,
    pub sh_flags: Elf32_Word,
    pub sh_addr: Elf32_Addr,
    pub sh_offset: Elf32_Off,
    pub sh_size: Elf32_Word,
    pub sh_link: Elf32_Word,
    pub sh_info: Elf32_Word,
    pub sh_addralign: Elf32_Word,
    pub sh_entsize: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Shdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Shdr>(),
        40usize,
        concat!("Size of: ", stringify!(Elf32_Shdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Shdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Shdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_addr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_link as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_info as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_addralign as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_addralign)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Shdr>())).sh_entsize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Shdr),
            "::",
            stringify!(sh_entsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Shdr {
    pub sh_name: Elf64_Word,
    pub sh_type: Elf64_Word,
    pub sh_flags: Elf64_Xword,
    pub sh_addr: Elf64_Addr,
    pub sh_offset: Elf64_Off,
    pub sh_size: Elf64_Xword,
    pub sh_link: Elf64_Word,
    pub sh_info: Elf64_Word,
    pub sh_addralign: Elf64_Xword,
    pub sh_entsize: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Shdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Shdr>(),
        64usize,
        concat!("Size of: ", stringify!(Elf64_Shdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Shdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Shdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_offset as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_link as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_info as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_addralign as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_addralign)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Shdr>())).sh_entsize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Shdr),
            "::",
            stringify!(sh_entsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Sym {
    pub st_name: Elf32_Word,
    pub st_value: Elf32_Addr,
    pub st_size: Elf32_Word,
    pub st_info: cty::c_uchar,
    pub st_other: cty::c_uchar,
    pub st_shndx: Elf32_Section,
}
#[test]
fn bindgen_test_layout_Elf32_Sym() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Sym>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_Sym))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Sym>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Sym))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Sym>())).st_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Sym>())).st_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Sym>())).st_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Sym>())).st_info as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Sym>())).st_other as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_other)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Sym>())).st_shndx as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Sym),
            "::",
            stringify!(st_shndx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Sym {
    pub st_name: Elf64_Word,
    pub st_info: cty::c_uchar,
    pub st_other: cty::c_uchar,
    pub st_shndx: Elf64_Section,
    pub st_value: Elf64_Addr,
    pub st_size: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Sym() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Sym>(),
        24usize,
        concat!("Size of: ", stringify!(Elf64_Sym))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Sym>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Sym))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Sym>())).st_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Sym>())).st_info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Sym>())).st_other as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_other)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Sym>())).st_shndx as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_shndx)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Sym>())).st_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Sym>())).st_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Sym),
            "::",
            stringify!(st_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Syminfo {
    pub si_boundto: Elf32_Half,
    pub si_flags: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Syminfo() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Syminfo>(),
        4usize,
        concat!("Size of: ", stringify!(Elf32_Syminfo))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Syminfo>(),
        2usize,
        concat!("Alignment of ", stringify!(Elf32_Syminfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Syminfo>())).si_boundto as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Syminfo),
            "::",
            stringify!(si_boundto)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Syminfo>())).si_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Syminfo),
            "::",
            stringify!(si_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Syminfo {
    pub si_boundto: Elf64_Half,
    pub si_flags: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Syminfo() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Syminfo>(),
        4usize,
        concat!("Size of: ", stringify!(Elf64_Syminfo))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Syminfo>(),
        2usize,
        concat!("Alignment of ", stringify!(Elf64_Syminfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Syminfo>())).si_boundto as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Syminfo),
            "::",
            stringify!(si_boundto)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Syminfo>())).si_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Syminfo),
            "::",
            stringify!(si_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Rel {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Rel() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Rel>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_Rel))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Rel>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Rel))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Rel>())).r_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rel),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Rel>())).r_info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rel),
            "::",
            stringify!(r_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Rel {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Rel() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Rel>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Rel))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Rel>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Rel))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Rel>())).r_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rel),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Rel>())).r_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rel),
            "::",
            stringify!(r_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Rela {
    pub r_offset: Elf32_Addr,
    pub r_info: Elf32_Word,
    pub r_addend: Elf32_Sword,
}
#[test]
fn bindgen_test_layout_Elf32_Rela() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Rela>(),
        12usize,
        concat!("Size of: ", stringify!(Elf32_Rela))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Rela>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Rela))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Rela>())).r_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rela),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Rela>())).r_info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rela),
            "::",
            stringify!(r_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Rela>())).r_addend as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Rela),
            "::",
            stringify!(r_addend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Rela {
    pub r_offset: Elf64_Addr,
    pub r_info: Elf64_Xword,
    pub r_addend: Elf64_Sxword,
}
#[test]
fn bindgen_test_layout_Elf64_Rela() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Rela>(),
        24usize,
        concat!("Size of: ", stringify!(Elf64_Rela))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Rela>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Rela))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Rela>())).r_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rela),
            "::",
            stringify!(r_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Rela>())).r_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rela),
            "::",
            stringify!(r_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Rela>())).r_addend as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Rela),
            "::",
            stringify!(r_addend)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Phdr {
    pub p_type: Elf32_Word,
    pub p_offset: Elf32_Off,
    pub p_vaddr: Elf32_Addr,
    pub p_paddr: Elf32_Addr,
    pub p_filesz: Elf32_Word,
    pub p_memsz: Elf32_Word,
    pub p_flags: Elf32_Word,
    pub p_align: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Phdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Phdr>(),
        32usize,
        concat!("Size of: ", stringify!(Elf32_Phdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Phdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Phdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_vaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_paddr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_filesz as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_filesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_memsz as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_memsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Phdr>())).p_align as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Phdr),
            "::",
            stringify!(p_align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Phdr {
    pub p_type: Elf64_Word,
    pub p_flags: Elf64_Word,
    pub p_offset: Elf64_Off,
    pub p_vaddr: Elf64_Addr,
    pub p_paddr: Elf64_Addr,
    pub p_filesz: Elf64_Xword,
    pub p_memsz: Elf64_Xword,
    pub p_align: Elf64_Xword,
}
#[test]
fn bindgen_test_layout_Elf64_Phdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Phdr>(),
        56usize,
        concat!("Size of: ", stringify!(Elf64_Phdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Phdr>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Phdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_vaddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_vaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_paddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_paddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_filesz as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_filesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_memsz as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_memsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Phdr>())).p_align as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Phdr),
            "::",
            stringify!(p_align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_Dyn {
    pub d_tag: Elf32_Sword,
    pub d_un: Elf32_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_Dyn__bindgen_ty_1 {
    pub d_val: Elf32_Word,
    pub d_ptr: Elf32_Addr,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_Elf32_Dyn__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Dyn__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(Elf32_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Dyn__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Dyn__bindgen_ty_1>())).d_val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Dyn__bindgen_ty_1>())).d_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf32_Dyn() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Dyn>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_Dyn))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Dyn>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Dyn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Dyn>())).d_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn),
            "::",
            stringify!(d_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Dyn>())).d_un as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Dyn),
            "::",
            stringify!(d_un)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_Dyn {
    pub d_tag: Elf64_Sxword,
    pub d_un: Elf64_Dyn__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_Dyn__bindgen_ty_1 {
    pub d_val: Elf64_Xword,
    pub d_ptr: Elf64_Addr,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Elf64_Dyn__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Dyn__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf64_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Dyn__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Dyn__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Dyn__bindgen_ty_1>())).d_val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Dyn__bindgen_ty_1>())).d_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn__bindgen_ty_1),
            "::",
            stringify!(d_ptr)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf64_Dyn() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Dyn>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Dyn))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Dyn>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Dyn))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Dyn>())).d_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn),
            "::",
            stringify!(d_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Dyn>())).d_un as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Dyn),
            "::",
            stringify!(d_un)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Verdef {
    pub vd_version: Elf32_Half,
    pub vd_flags: Elf32_Half,
    pub vd_ndx: Elf32_Half,
    pub vd_cnt: Elf32_Half,
    pub vd_hash: Elf32_Word,
    pub vd_aux: Elf32_Word,
    pub vd_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verdef() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Verdef>(),
        20usize,
        concat!("Size of: ", stringify!(Elf32_Verdef))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Verdef>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Verdef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_ndx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_ndx)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_cnt as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_aux as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdef>())).vd_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdef),
            "::",
            stringify!(vd_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Verdef {
    pub vd_version: Elf64_Half,
    pub vd_flags: Elf64_Half,
    pub vd_ndx: Elf64_Half,
    pub vd_cnt: Elf64_Half,
    pub vd_hash: Elf64_Word,
    pub vd_aux: Elf64_Word,
    pub vd_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verdef() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Verdef>(),
        20usize,
        concat!("Size of: ", stringify!(Elf64_Verdef))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Verdef>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Verdef))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_ndx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_ndx)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_cnt as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_hash as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_aux as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdef>())).vd_next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdef),
            "::",
            stringify!(vd_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Verdaux {
    pub vda_name: Elf32_Word,
    pub vda_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verdaux() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Verdaux>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_Verdaux))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Verdaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Verdaux))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdaux>())).vda_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdaux),
            "::",
            stringify!(vda_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verdaux>())).vda_next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verdaux),
            "::",
            stringify!(vda_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Verdaux {
    pub vda_name: Elf64_Word,
    pub vda_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verdaux() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Verdaux>(),
        8usize,
        concat!("Size of: ", stringify!(Elf64_Verdaux))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Verdaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Verdaux))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdaux>())).vda_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdaux),
            "::",
            stringify!(vda_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verdaux>())).vda_next as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verdaux),
            "::",
            stringify!(vda_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Verneed {
    pub vn_version: Elf32_Half,
    pub vn_cnt: Elf32_Half,
    pub vn_file: Elf32_Word,
    pub vn_aux: Elf32_Word,
    pub vn_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Verneed() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Verneed>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_Verneed))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Verneed>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Verneed))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verneed>())).vn_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verneed>())).vn_cnt as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verneed>())).vn_file as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verneed>())).vn_aux as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Verneed>())).vn_next as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Verneed),
            "::",
            stringify!(vn_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Verneed {
    pub vn_version: Elf64_Half,
    pub vn_cnt: Elf64_Half,
    pub vn_file: Elf64_Word,
    pub vn_aux: Elf64_Word,
    pub vn_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Verneed() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Verneed>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Verneed))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Verneed>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Verneed))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verneed>())).vn_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verneed>())).vn_cnt as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verneed>())).vn_file as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verneed>())).vn_aux as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_aux)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Verneed>())).vn_next as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Verneed),
            "::",
            stringify!(vn_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Vernaux {
    pub vna_hash: Elf32_Word,
    pub vna_flags: Elf32_Half,
    pub vna_other: Elf32_Half,
    pub vna_name: Elf32_Word,
    pub vna_next: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Vernaux() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Vernaux>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_Vernaux))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Vernaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Vernaux))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Vernaux>())).vna_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Vernaux>())).vna_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Vernaux>())).vna_other as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_other)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Vernaux>())).vna_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Vernaux>())).vna_next as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Vernaux),
            "::",
            stringify!(vna_next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Vernaux {
    pub vna_hash: Elf64_Word,
    pub vna_flags: Elf64_Half,
    pub vna_other: Elf64_Half,
    pub vna_name: Elf64_Word,
    pub vna_next: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Vernaux() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Vernaux>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_Vernaux))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Vernaux>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Vernaux))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Vernaux>())).vna_hash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Vernaux>())).vna_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Vernaux>())).vna_other as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_other)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Vernaux>())).vna_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Vernaux>())).vna_next as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Vernaux),
            "::",
            stringify!(vna_next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf32_auxv_t {
    pub a_type: cty::c_int,
    pub a_un: Elf32_auxv_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_auxv_t__bindgen_ty_1 {
    pub a_val: cty::c_long,
    pub a_ptr: *mut cty::c_void,
    pub a_fcn: ::core::option::Option<unsafe extern "C" fn()>,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Elf32_auxv_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_auxv_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_auxv_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf32_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_auxv_t__bindgen_ty_1>())).a_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_auxv_t__bindgen_ty_1>())).a_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_auxv_t__bindgen_ty_1>())).a_fcn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_fcn)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf32_auxv_t() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_auxv_t>(),
        16usize,
        concat!("Size of: ", stringify!(Elf32_auxv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_auxv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf32_auxv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_auxv_t>())).a_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t),
            "::",
            stringify!(a_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_auxv_t>())).a_un as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_auxv_t),
            "::",
            stringify!(a_un)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Elf64_auxv_t {
    pub a_type: cty::c_long,
    pub a_un: Elf64_auxv_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf64_auxv_t__bindgen_ty_1 {
    pub a_val: cty::c_long,
    pub a_ptr: *mut cty::c_void,
    pub a_fcn: ::core::option::Option<unsafe extern "C" fn()>,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_Elf64_auxv_t__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_auxv_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf64_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_auxv_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_auxv_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf64_auxv_t__bindgen_ty_1>())).a_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_val)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf64_auxv_t__bindgen_ty_1>())).a_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf64_auxv_t__bindgen_ty_1>())).a_fcn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t__bindgen_ty_1),
            "::",
            stringify!(a_fcn)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf64_auxv_t() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_auxv_t>(),
        16usize,
        concat!("Size of: ", stringify!(Elf64_auxv_t))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_auxv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_auxv_t))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_auxv_t>())).a_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t),
            "::",
            stringify!(a_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_auxv_t>())).a_un as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_auxv_t),
            "::",
            stringify!(a_un)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Nhdr {
    pub n_namesz: Elf32_Word,
    pub n_descsz: Elf32_Word,
    pub n_type: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Nhdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Nhdr>(),
        12usize,
        concat!("Size of: ", stringify!(Elf32_Nhdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Nhdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Nhdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Nhdr>())).n_namesz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Nhdr),
            "::",
            stringify!(n_namesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Nhdr>())).n_descsz as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Nhdr),
            "::",
            stringify!(n_descsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Nhdr>())).n_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Nhdr),
            "::",
            stringify!(n_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Nhdr {
    pub n_namesz: Elf64_Word,
    pub n_descsz: Elf64_Word,
    pub n_type: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Nhdr() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Nhdr>(),
        12usize,
        concat!("Size of: ", stringify!(Elf64_Nhdr))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Nhdr>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Nhdr))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Nhdr>())).n_namesz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Nhdr),
            "::",
            stringify!(n_namesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Nhdr>())).n_descsz as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Nhdr),
            "::",
            stringify!(n_descsz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Nhdr>())).n_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Nhdr),
            "::",
            stringify!(n_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Move {
    pub m_value: Elf32_Xword,
    pub m_info: Elf32_Word,
    pub m_poffset: Elf32_Word,
    pub m_repeat: Elf32_Half,
    pub m_stride: Elf32_Half,
}
#[test]
fn bindgen_test_layout_Elf32_Move() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Move>(),
        24usize,
        concat!("Size of: ", stringify!(Elf32_Move))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Move>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf32_Move))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Move>())).m_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Move>())).m_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Move>())).m_poffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_poffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Move>())).m_repeat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_repeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Move>())).m_stride as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Move),
            "::",
            stringify!(m_stride)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Move {
    pub m_value: Elf64_Xword,
    pub m_info: Elf64_Xword,
    pub m_poffset: Elf64_Xword,
    pub m_repeat: Elf64_Half,
    pub m_stride: Elf64_Half,
}
#[test]
fn bindgen_test_layout_Elf64_Move() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Move>(),
        32usize,
        concat!("Size of: ", stringify!(Elf64_Move))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Move>(),
        8usize,
        concat!("Alignment of ", stringify!(Elf64_Move))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Move>())).m_value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Move>())).m_info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Move>())).m_poffset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_poffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Move>())).m_repeat as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_repeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Move>())).m_stride as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Move),
            "::",
            stringify!(m_stride)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Elf32_gptab {
    pub gt_header: Elf32_gptab__bindgen_ty_1,
    pub gt_entry: Elf32_gptab__bindgen_ty_2,
    _bindgen_union_align: [u32; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_gptab__bindgen_ty_1 {
    pub gt_current_g_value: Elf32_Word,
    pub gt_unused: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_gptab__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_gptab__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_gptab__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_gptab__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_gptab__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_gptab__bindgen_ty_1>())).gt_current_g_value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_1),
            "::",
            stringify!(gt_current_g_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_gptab__bindgen_ty_1>())).gt_unused as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_1),
            "::",
            stringify!(gt_unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_gptab__bindgen_ty_2 {
    pub gt_g_value: Elf32_Word,
    pub gt_bytes: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_gptab__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_gptab__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_gptab__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_gptab__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_gptab__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_gptab__bindgen_ty_2>())).gt_g_value as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_2),
            "::",
            stringify!(gt_g_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<Elf32_gptab__bindgen_ty_2>())).gt_bytes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab__bindgen_ty_2),
            "::",
            stringify!(gt_bytes)
        )
    );
}
#[test]
fn bindgen_test_layout_Elf32_gptab() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_gptab>(),
        8usize,
        concat!("Size of: ", stringify!(Elf32_gptab))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_gptab>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_gptab))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_gptab>())).gt_header as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab),
            "::",
            stringify!(gt_header)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_gptab>())).gt_entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_gptab),
            "::",
            stringify!(gt_entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_RegInfo {
    pub ri_gprmask: Elf32_Word,
    pub ri_cprmask: [Elf32_Word; 4usize],
    pub ri_gp_value: Elf32_Sword,
}
#[test]
fn bindgen_test_layout_Elf32_RegInfo() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_RegInfo>(),
        24usize,
        concat!("Size of: ", stringify!(Elf32_RegInfo))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_RegInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_RegInfo))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_RegInfo>())).ri_gprmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_RegInfo),
            "::",
            stringify!(ri_gprmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_RegInfo>())).ri_cprmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_RegInfo),
            "::",
            stringify!(ri_cprmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_RegInfo>())).ri_gp_value as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_RegInfo),
            "::",
            stringify!(ri_gp_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_Options {
    pub kind: cty::c_uchar,
    pub size: cty::c_uchar,
    pub section: Elf32_Section,
    pub info: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_Options() {
    assert_eq!(
        ::core::mem::size_of::<Elf_Options>(),
        8usize,
        concat!("Size of: ", stringify!(Elf_Options))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf_Options>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf_Options))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf_Options>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf_Options>())).size as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf_Options>())).section as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(section)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf_Options>())).info as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf_Options_Hw {
    pub hwp_flags1: Elf32_Word,
    pub hwp_flags2: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf_Options_Hw() {
    assert_eq!(
        ::core::mem::size_of::<Elf_Options_Hw>(),
        8usize,
        concat!("Size of: ", stringify!(Elf_Options_Hw))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf_Options_Hw>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf_Options_Hw))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf_Options_Hw>())).hwp_flags1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options_Hw),
            "::",
            stringify!(hwp_flags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf_Options_Hw>())).hwp_flags2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf_Options_Hw),
            "::",
            stringify!(hwp_flags2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf32_Lib {
    pub l_name: Elf32_Word,
    pub l_time_stamp: Elf32_Word,
    pub l_checksum: Elf32_Word,
    pub l_version: Elf32_Word,
    pub l_flags: Elf32_Word,
}
#[test]
fn bindgen_test_layout_Elf32_Lib() {
    assert_eq!(
        ::core::mem::size_of::<Elf32_Lib>(),
        20usize,
        concat!("Size of: ", stringify!(Elf32_Lib))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf32_Lib>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf32_Lib))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Lib>())).l_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Lib>())).l_time_stamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_time_stamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Lib>())).l_checksum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Lib>())).l_version as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf32_Lib>())).l_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf32_Lib),
            "::",
            stringify!(l_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Elf64_Lib {
    pub l_name: Elf64_Word,
    pub l_time_stamp: Elf64_Word,
    pub l_checksum: Elf64_Word,
    pub l_version: Elf64_Word,
    pub l_flags: Elf64_Word,
}
#[test]
fn bindgen_test_layout_Elf64_Lib() {
    assert_eq!(
        ::core::mem::size_of::<Elf64_Lib>(),
        20usize,
        concat!("Size of: ", stringify!(Elf64_Lib))
    );
    assert_eq!(
        ::core::mem::align_of::<Elf64_Lib>(),
        4usize,
        concat!("Alignment of ", stringify!(Elf64_Lib))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Lib>())).l_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Lib>())).l_time_stamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_time_stamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Lib>())).l_checksum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_checksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Lib>())).l_version as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<Elf64_Lib>())).l_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Elf64_Lib),
            "::",
            stringify!(l_flags)
        )
    );
}
pub type Elf32_Conflict = Elf32_Addr;
pub type Elf_Addr = Elf64_Addr;
pub type Elf_Nhdr = Elf64_Nhdr;
pub type Elf_Ehdr = Elf64_Ehdr;
pub type Elf_Phdr = Elf64_Phdr;
pub type Elf_Half = Elf64_Half;
pub type Elf_Off = Elf64_Off;
pub type Elf_Rel = Elf64_Rel;
pub type Elf_Rela = Elf64_Rela;
pub type Elf_Section = Elf64_Section;
pub type Elf_Shdr = Elf64_Shdr;
pub type Elf_Sword = Elf64_Sword;
pub type Elf_Sym = Elf64_Sym;
pub type Elf_Word = Elf64_Word;
pub type Elf_Xword = Elf64_Xword;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_dl_segment {
    pub next: *mut grub_dl_segment,
    pub addr: *mut cty::c_void,
    pub size: grub_size_t,
    pub section: cty::c_uint,
}
#[test]
fn bindgen_test_layout_grub_dl_segment() {
    assert_eq!(
        ::core::mem::size_of::<grub_dl_segment>(),
        32usize,
        concat!("Size of: ", stringify!(grub_dl_segment))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_dl_segment>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_dl_segment))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl_segment>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl_segment),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl_segment>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl_segment),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl_segment>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl_segment),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl_segment>())).section as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl_segment),
            "::",
            stringify!(section)
        )
    );
}
pub type grub_dl_segment_t = *mut grub_dl_segment;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_dl_dep {
    pub next: *mut grub_dl_dep,
    pub mod_: *mut grub_dl,
}
#[test]
fn bindgen_test_layout_grub_dl_dep() {
    assert_eq!(
        ::core::mem::size_of::<grub_dl_dep>(),
        16usize,
        concat!("Size of: ", stringify!(grub_dl_dep))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_dl_dep>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_dl_dep))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl_dep>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl_dep),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl_dep>())).mod_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl_dep),
            "::",
            stringify!(mod_)
        )
    );
}
pub type grub_dl_dep_t = *mut grub_dl_dep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grub_dl {
    pub name: *mut cty::c_char,
    pub ref_count: cty::c_int,
    pub persistent: cty::c_int,
    pub dep: grub_dl_dep_t,
    pub segment: grub_dl_segment_t,
    pub symtab: *mut Elf_Sym,
    pub symsize: grub_size_t,
    pub init: ::core::option::Option<unsafe extern "C" fn(mod_: *mut grub_dl)>,
    pub fini: ::core::option::Option<unsafe extern "C" fn()>,
    pub base: *mut cty::c_void,
    pub sz: grub_size_t,
    pub next: *mut grub_dl,
}
#[test]
fn bindgen_test_layout_grub_dl() {
    assert_eq!(
        ::core::mem::size_of::<grub_dl>(),
        88usize,
        concat!("Size of: ", stringify!(grub_dl))
    );
    assert_eq!(
        ::core::mem::align_of::<grub_dl>(),
        8usize,
        concat!("Alignment of ", stringify!(grub_dl))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).ref_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).persistent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(persistent)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).dep as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(dep)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).segment as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).symtab as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(symtab)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).symsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(symsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).init as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).fini as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(fini)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).base as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).sz as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<grub_dl>())).next as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(grub_dl),
            "::",
            stringify!(next)
        )
    );
}
pub type grub_dl_t = *mut grub_dl;
extern "C" {
    pub fn grub_dl_load_file(filename: *const cty::c_char) -> grub_dl_t;
}
extern "C" {
    pub fn grub_dl_load(name: *const cty::c_char) -> grub_dl_t;
}
extern "C" {
    pub fn grub_dl_load_core(addr: *mut cty::c_void, size: grub_size_t) -> grub_dl_t;
}
extern "C" {
    pub fn grub_dl_load_core_noinit(addr: *mut cty::c_void, size: grub_size_t) -> grub_dl_t;
}
extern "C" {
    pub fn grub_dl_unload(mod_: grub_dl_t) -> cty::c_int;
}
extern "C" {
    pub fn grub_dl_unload_unneeded();
}
extern "C" {
    pub fn grub_dl_ref(mod_: grub_dl_t) -> cty::c_int;
}
extern "C" {
    pub fn grub_dl_unref(mod_: grub_dl_t) -> cty::c_int;
}
extern "C" {
    pub fn grub_dl_ref_count(mod_: grub_dl_t) -> cty::c_int;
}
extern "C" {
    pub static mut grub_dl_head: grub_dl_t;
}
extern "C" {
    pub fn grub_dl_register_symbol(
        name: *const cty::c_char,
        addr: *mut cty::c_void,
        isfunc: cty::c_int,
        mod_: grub_dl_t,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_arch_dl_check_header(ehdr: *mut cty::c_void) -> grub_err_t;
}
extern "C" {
    pub fn grub_arch_dl_relocate_symbols(
        mod_: grub_dl_t,
        ehdr: *mut cty::c_void,
        s: *mut Elf_Shdr,
        seg: grub_dl_segment_t,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_ia64_dl_get_tramp_got_size(
        ehdr: *const cty::c_void,
        tramp: *mut grub_size_t,
        got: *mut grub_size_t,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_arm64_dl_get_tramp_got_size(
        ehdr: *const cty::c_void,
        tramp: *mut grub_size_t,
        got: *mut grub_size_t,
    ) -> grub_err_t;
}
extern "C" {
    pub fn grub_arch_dl_get_tramp_got_size(
        ehdr: *const cty::c_void,
        tramp: *mut grub_size_t,
        got: *mut grub_size_t,
    ) -> grub_err_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: cty::c_uint,
    pub fp_offset: cty::c_uint,
    pub overflow_arg_area: *mut cty::c_void,
    pub reg_save_area: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::core::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::core::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
